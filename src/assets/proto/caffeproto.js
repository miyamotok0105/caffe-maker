/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.caffe.AccuracyParameter');
goog.provide('proto.caffe.ArgMaxParameter');
goog.provide('proto.caffe.BatchNormParameter');
goog.provide('proto.caffe.BiasParameter');
goog.provide('proto.caffe.BlobProto');
goog.provide('proto.caffe.BlobProtoVector');
goog.provide('proto.caffe.BlobShape');
goog.provide('proto.caffe.ConcatParameter');
goog.provide('proto.caffe.ContrastiveLossParameter');
goog.provide('proto.caffe.ConvolutionParameter');
goog.provide('proto.caffe.ConvolutionParameter.Engine');
goog.provide('proto.caffe.CropParameter');
goog.provide('proto.caffe.DataParameter');
goog.provide('proto.caffe.DataParameter.DB');
goog.provide('proto.caffe.Datum');
goog.provide('proto.caffe.DropoutParameter');
goog.provide('proto.caffe.DummyDataParameter');
goog.provide('proto.caffe.ELUParameter');
goog.provide('proto.caffe.EltwiseParameter');
goog.provide('proto.caffe.EltwiseParameter.EltwiseOp');
goog.provide('proto.caffe.EmbedParameter');
goog.provide('proto.caffe.ExpParameter');
goog.provide('proto.caffe.FillerParameter');
goog.provide('proto.caffe.FillerParameter.VarianceNorm');
goog.provide('proto.caffe.FlattenParameter');
goog.provide('proto.caffe.HDF5DataParameter');
goog.provide('proto.caffe.HDF5OutputParameter');
goog.provide('proto.caffe.HingeLossParameter');
goog.provide('proto.caffe.HingeLossParameter.Norm');
goog.provide('proto.caffe.ImageDataParameter');
goog.provide('proto.caffe.InfogainLossParameter');
goog.provide('proto.caffe.InnerProductParameter');
goog.provide('proto.caffe.InputParameter');
goog.provide('proto.caffe.LRNParameter');
goog.provide('proto.caffe.LRNParameter.Engine');
goog.provide('proto.caffe.LRNParameter.NormRegion');
goog.provide('proto.caffe.LayerParameter');
goog.provide('proto.caffe.LogParameter');
goog.provide('proto.caffe.LossParameter');
goog.provide('proto.caffe.LossParameter.NormalizationMode');
goog.provide('proto.caffe.MVNParameter');
goog.provide('proto.caffe.MemoryDataParameter');
goog.provide('proto.caffe.NetParameter');
goog.provide('proto.caffe.NetState');
goog.provide('proto.caffe.NetStateRule');
goog.provide('proto.caffe.PReLUParameter');
goog.provide('proto.caffe.ParamSpec');
goog.provide('proto.caffe.ParamSpec.DimCheckMode');
goog.provide('proto.caffe.ParameterParameter');
goog.provide('proto.caffe.Phase');
goog.provide('proto.caffe.PoolingParameter');
goog.provide('proto.caffe.PoolingParameter.Engine');
goog.provide('proto.caffe.PoolingParameter.PoolMethod');
goog.provide('proto.caffe.PowerParameter');
goog.provide('proto.caffe.PythonParameter');
goog.provide('proto.caffe.ReLUParameter');
goog.provide('proto.caffe.ReLUParameter.Engine');
goog.provide('proto.caffe.RecurrentParameter');
goog.provide('proto.caffe.ReductionParameter');
goog.provide('proto.caffe.ReductionParameter.ReductionOp');
goog.provide('proto.caffe.ReshapeParameter');
goog.provide('proto.caffe.SPPParameter');
goog.provide('proto.caffe.SPPParameter.Engine');
goog.provide('proto.caffe.SPPParameter.PoolMethod');
goog.provide('proto.caffe.ScaleParameter');
goog.provide('proto.caffe.SigmoidParameter');
goog.provide('proto.caffe.SigmoidParameter.Engine');
goog.provide('proto.caffe.SliceParameter');
goog.provide('proto.caffe.SoftmaxParameter');
goog.provide('proto.caffe.SoftmaxParameter.Engine');
goog.provide('proto.caffe.SolverParameter');
goog.provide('proto.caffe.SolverParameter.SnapshotFormat');
goog.provide('proto.caffe.SolverParameter.SolverMode');
goog.provide('proto.caffe.SolverParameter.SolverType');
goog.provide('proto.caffe.SolverState');
goog.provide('proto.caffe.TanHParameter');
goog.provide('proto.caffe.TanHParameter.Engine');
goog.provide('proto.caffe.ThresholdParameter');
goog.provide('proto.caffe.TileParameter');
goog.provide('proto.caffe.TransformationParameter');
goog.provide('proto.caffe.V0LayerParameter');
goog.provide('proto.caffe.V0LayerParameter.PoolMethod');
goog.provide('proto.caffe.V1LayerParameter');
goog.provide('proto.caffe.V1LayerParameter.DimCheckMode');
goog.provide('proto.caffe.V1LayerParameter.LayerType');
goog.provide('proto.caffe.WindowDataParameter');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.BlobShape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.BlobShape.repeatedFields_, null);
};
goog.inherits(proto.caffe.BlobShape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.BlobShape.displayName = 'proto.caffe.BlobShape';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.BlobShape.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.BlobShape.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.BlobShape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.BlobShape} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.BlobShape.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.BlobShape}
 */
proto.caffe.BlobShape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.BlobShape;
  return proto.caffe.BlobShape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.BlobShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.BlobShape}
 */
proto.caffe.BlobShape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setDimList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.BlobShape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.BlobShape.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.BlobShape} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.BlobShape.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 dim = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.BlobShape.prototype.getDimList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.caffe.BlobShape.prototype.setDimList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.BlobShape.prototype.addDim = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.caffe.BlobShape.prototype.clearDimList = function() {
  this.setDimList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.BlobProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.BlobProto.repeatedFields_, null);
};
goog.inherits(proto.caffe.BlobProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.BlobProto.displayName = 'proto.caffe.BlobProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.BlobProto.repeatedFields_ = [5,6,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.BlobProto.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.BlobProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.BlobProto} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.BlobProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.caffe.BlobShape.toObject(includeInstance, f),
    dataList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    diffList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    doubleDataList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    doubleDiffList: jspb.Message.getRepeatedFloatingPointField(msg, 9),
    num: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channels: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    width: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.BlobProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.BlobProto;
  return proto.caffe.BlobProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.BlobProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.BlobProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setDataList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setDiffList(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDoubleDataList(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDoubleDiffList(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.BlobProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.BlobProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.BlobProto} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.BlobProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getDiffList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getDoubleDataList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getDoubleDiffList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional BlobShape shape = 7;
 * @return {?proto.caffe.BlobShape}
 */
proto.caffe.BlobProto.prototype.getShape = function() {
  return /** @type{?proto.caffe.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.caffe.BlobShape, 7));
};


/** @param {?proto.caffe.BlobShape|undefined} value */
proto.caffe.BlobProto.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.caffe.BlobProto.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BlobProto.prototype.hasShape = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated float data = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.BlobProto.prototype.getDataList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.caffe.BlobProto.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.BlobProto.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.caffe.BlobProto.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * repeated float diff = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.BlobProto.prototype.getDiffList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array.<number>} value */
proto.caffe.BlobProto.prototype.setDiffList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.BlobProto.prototype.addDiff = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.caffe.BlobProto.prototype.clearDiffList = function() {
  this.setDiffList([]);
};


/**
 * repeated double double_data = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.BlobProto.prototype.getDoubleDataList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array.<number>} value */
proto.caffe.BlobProto.prototype.setDoubleDataList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.BlobProto.prototype.addDoubleData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.caffe.BlobProto.prototype.clearDoubleDataList = function() {
  this.setDoubleDataList([]);
};


/**
 * repeated double double_diff = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.BlobProto.prototype.getDoubleDiffList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/** @param {!Array.<number>} value */
proto.caffe.BlobProto.prototype.setDoubleDiffList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.BlobProto.prototype.addDoubleDiff = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.caffe.BlobProto.prototype.clearDoubleDiffList = function() {
  this.setDoubleDiffList([]);
};


/**
 * optional int32 num = 1;
 * @return {number}
 */
proto.caffe.BlobProto.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.BlobProto.prototype.setNum = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.BlobProto.prototype.clearNum = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BlobProto.prototype.hasNum = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 channels = 2;
 * @return {number}
 */
proto.caffe.BlobProto.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.BlobProto.prototype.setChannels = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.BlobProto.prototype.clearChannels = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BlobProto.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.caffe.BlobProto.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.BlobProto.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.BlobProto.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BlobProto.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 width = 4;
 * @return {number}
 */
proto.caffe.BlobProto.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.BlobProto.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.BlobProto.prototype.clearWidth = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BlobProto.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.BlobProtoVector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.BlobProtoVector.repeatedFields_, null);
};
goog.inherits(proto.caffe.BlobProtoVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.BlobProtoVector.displayName = 'proto.caffe.BlobProtoVector';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.BlobProtoVector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.BlobProtoVector.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.BlobProtoVector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.BlobProtoVector} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.BlobProtoVector.toObject = function(includeInstance, msg) {
  var f, obj = {
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.caffe.BlobProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.BlobProtoVector}
 */
proto.caffe.BlobProtoVector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.BlobProtoVector;
  return proto.caffe.BlobProtoVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.BlobProtoVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.BlobProtoVector}
 */
proto.caffe.BlobProtoVector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.BlobProto;
      reader.readMessage(value,proto.caffe.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.BlobProtoVector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.BlobProtoVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.BlobProtoVector} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.BlobProtoVector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.caffe.BlobProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlobProto blobs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobProto>}
 */
proto.caffe.BlobProtoVector.prototype.getBlobsList = function() {
  return /** @type{!Array.<!proto.caffe.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobProto, 1));
};


/** @param {!Array.<!proto.caffe.BlobProto>} value */
proto.caffe.BlobProtoVector.prototype.setBlobsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.caffe.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.BlobProtoVector.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.caffe.BlobProto, opt_index);
};


proto.caffe.BlobProtoVector.prototype.clearBlobsList = function() {
  this.setBlobsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.Datum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.Datum.repeatedFields_, null);
};
goog.inherits(proto.caffe.Datum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.Datum.displayName = 'proto.caffe.Datum';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.Datum.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.Datum.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.Datum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.Datum} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.Datum.toObject = function(includeInstance, msg) {
  var f, obj = {
    channels: jspb.Message.getField(msg, 1),
    height: jspb.Message.getField(msg, 2),
    width: jspb.Message.getField(msg, 3),
    data: msg.getData_asB64(),
    label: jspb.Message.getField(msg, 5),
    floatDataList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    encoded: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.Datum}
 */
proto.caffe.Datum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.Datum;
  return proto.caffe.Datum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.Datum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.Datum}
 */
proto.caffe.Datum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannels(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addFloatData(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncoded(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.Datum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.Datum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.Datum} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.Datum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFloatDataList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional int32 channels = 1;
 * @return {number}
 */
proto.caffe.Datum.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.Datum.prototype.setChannels = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.Datum.prototype.clearChannels = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.caffe.Datum.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.Datum.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.Datum.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.caffe.Datum.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.Datum.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.Datum.prototype.clearWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.caffe.Datum.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.caffe.Datum.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.caffe.Datum.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.caffe.Datum.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.Datum.prototype.clearData = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 label = 5;
 * @return {number}
 */
proto.caffe.Datum.prototype.getLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.caffe.Datum.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.Datum.prototype.clearLabel = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasLabel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated float float_data = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.Datum.prototype.getFloatDataList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array.<number>} value */
proto.caffe.Datum.prototype.setFloatDataList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.Datum.prototype.addFloatData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.caffe.Datum.prototype.clearFloatDataList = function() {
  this.setFloatDataList([]);
};


/**
 * optional bool encoded = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.Datum.prototype.getEncoded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.caffe.Datum.prototype.setEncoded = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.Datum.prototype.clearEncoded = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.Datum.prototype.hasEncoded = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.FillerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.FillerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.FillerParameter.displayName = 'proto.caffe.FillerParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.FillerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.FillerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.FillerParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.FillerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, "constant"),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    min: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    max: +jspb.Message.getFieldWithDefault(msg, 4, 1.0),
    mean: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    std: +jspb.Message.getFieldWithDefault(msg, 6, 1.0),
    sparse: jspb.Message.getFieldWithDefault(msg, 7, -1),
    varianceNorm: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.FillerParameter}
 */
proto.caffe.FillerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.FillerParameter;
  return proto.caffe.FillerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.FillerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.FillerParameter}
 */
proto.caffe.FillerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMean(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStd(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSparse(value);
      break;
    case 8:
      var value = /** @type {!proto.caffe.FillerParameter.VarianceNorm} */ (reader.readEnum());
      msg.setVarianceNorm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.FillerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.FillerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.FillerParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.FillerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {!proto.caffe.FillerParameter.VarianceNorm} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.FillerParameter.VarianceNorm = {
  FAN_IN: 0,
  FAN_OUT: 1,
  AVERAGE: 2
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.caffe.FillerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "constant"));
};


/** @param {string} value */
proto.caffe.FillerParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.FillerParameter.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.FillerParameter.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float min = 3;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getMin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setMin = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.FillerParameter.prototype.clearMin = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasMin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float max = 4;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 1.0));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setMax = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.FillerParameter.prototype.clearMax = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasMax = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float mean = 5;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getMean = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setMean = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.FillerParameter.prototype.clearMean = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasMean = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float std = 6;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getStd = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 1.0));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setStd = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.FillerParameter.prototype.clearStd = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasStd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 sparse = 7;
 * @return {number}
 */
proto.caffe.FillerParameter.prototype.getSparse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, -1));
};


/** @param {number} value */
proto.caffe.FillerParameter.prototype.setSparse = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.FillerParameter.prototype.clearSparse = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasSparse = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional VarianceNorm variance_norm = 8;
 * @return {!proto.caffe.FillerParameter.VarianceNorm}
 */
proto.caffe.FillerParameter.prototype.getVarianceNorm = function() {
  return /** @type {!proto.caffe.FillerParameter.VarianceNorm} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.caffe.FillerParameter.VarianceNorm} value */
proto.caffe.FillerParameter.prototype.setVarianceNorm = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.FillerParameter.prototype.clearVarianceNorm = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FillerParameter.prototype.hasVarianceNorm = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.NetParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.NetParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.NetParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.NetParameter.displayName = 'proto.caffe.NetParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.NetParameter.repeatedFields_ = [3,8,4,100,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.NetParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.NetParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.NetParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.NetParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    inputList: jspb.Message.getField(msg, 3),
    inputShapeList: jspb.Message.toObjectList(msg.getInputShapeList(),
    proto.caffe.BlobShape.toObject, includeInstance),
    inputDimList: jspb.Message.getField(msg, 4),
    forceBackward: jspb.Message.getFieldWithDefault(msg, 5, false),
    state: (f = msg.getState()) && proto.caffe.NetState.toObject(includeInstance, f),
    debugInfo: jspb.Message.getFieldWithDefault(msg, 7, false),
    layerList: jspb.Message.toObjectList(msg.getLayerList(),
    proto.caffe.LayerParameter.toObject, includeInstance),
    layersList: jspb.Message.toObjectList(msg.getLayersList(),
    proto.caffe.V1LayerParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.NetParameter}
 */
proto.caffe.NetParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.NetParameter;
  return proto.caffe.NetParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.NetParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.NetParameter}
 */
proto.caffe.NetParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addInput(value);
      break;
    case 8:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.addInputShape(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addInputDim(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceBackward(value);
      break;
    case 6:
      var value = new proto.caffe.NetState;
      reader.readMessage(value,proto.caffe.NetState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 100:
      var value = new proto.caffe.LayerParameter;
      reader.readMessage(value,proto.caffe.LayerParameter.deserializeBinaryFromReader);
      msg.addLayer(value);
      break;
    case 2:
      var value = new proto.caffe.V1LayerParameter;
      reader.readMessage(value,proto.caffe.V1LayerParameter.deserializeBinaryFromReader);
      msg.addLayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.NetParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.NetParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.NetParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.NetParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getInputShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getInputDimList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.caffe.NetState.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.caffe.LayerParameter.serializeBinaryToWriter
    );
  }
  f = message.getLayersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.caffe.V1LayerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.caffe.NetParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.NetParameter.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.NetParameter.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string input = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.NetParameter.prototype.getInputList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.caffe.NetParameter.prototype.setInputList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.NetParameter.prototype.addInput = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.NetParameter.prototype.clearInputList = function() {
  this.setInputList([]);
};


/**
 * repeated BlobShape input_shape = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobShape>}
 */
proto.caffe.NetParameter.prototype.getInputShapeList = function() {
  return /** @type{!Array.<!proto.caffe.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobShape, 8));
};


/** @param {!Array.<!proto.caffe.BlobShape>} value */
proto.caffe.NetParameter.prototype.setInputShapeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.caffe.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobShape}
 */
proto.caffe.NetParameter.prototype.addInputShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.caffe.BlobShape, opt_index);
};


proto.caffe.NetParameter.prototype.clearInputShapeList = function() {
  this.setInputShapeList([]);
};


/**
 * repeated int32 input_dim = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.NetParameter.prototype.getInputDimList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.caffe.NetParameter.prototype.setInputDimList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.NetParameter.prototype.addInputDim = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.caffe.NetParameter.prototype.clearInputDimList = function() {
  this.setInputDimList([]);
};


/**
 * optional bool force_backward = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.NetParameter.prototype.getForceBackward = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.caffe.NetParameter.prototype.setForceBackward = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.NetParameter.prototype.clearForceBackward = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetParameter.prototype.hasForceBackward = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NetState state = 6;
 * @return {?proto.caffe.NetState}
 */
proto.caffe.NetParameter.prototype.getState = function() {
  return /** @type{?proto.caffe.NetState} */ (
    jspb.Message.getWrapperField(this, proto.caffe.NetState, 6));
};


/** @param {?proto.caffe.NetState|undefined} value */
proto.caffe.NetParameter.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.caffe.NetParameter.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetParameter.prototype.hasState = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool debug_info = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.NetParameter.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.caffe.NetParameter.prototype.setDebugInfo = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.NetParameter.prototype.clearDebugInfo = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetParameter.prototype.hasDebugInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated LayerParameter layer = 100;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.LayerParameter>}
 */
proto.caffe.NetParameter.prototype.getLayerList = function() {
  return /** @type{!Array.<!proto.caffe.LayerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.LayerParameter, 100));
};


/** @param {!Array.<!proto.caffe.LayerParameter>} value */
proto.caffe.NetParameter.prototype.setLayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.caffe.LayerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.LayerParameter}
 */
proto.caffe.NetParameter.prototype.addLayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.caffe.LayerParameter, opt_index);
};


proto.caffe.NetParameter.prototype.clearLayerList = function() {
  this.setLayerList([]);
};


/**
 * repeated V1LayerParameter layers = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.V1LayerParameter>}
 */
proto.caffe.NetParameter.prototype.getLayersList = function() {
  return /** @type{!Array.<!proto.caffe.V1LayerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.V1LayerParameter, 2));
};


/** @param {!Array.<!proto.caffe.V1LayerParameter>} value */
proto.caffe.NetParameter.prototype.setLayersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.caffe.V1LayerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.V1LayerParameter}
 */
proto.caffe.NetParameter.prototype.addLayers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.caffe.V1LayerParameter, opt_index);
};


proto.caffe.NetParameter.prototype.clearLayersList = function() {
  this.setLayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SolverParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.SolverParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.SolverParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SolverParameter.displayName = 'proto.caffe.SolverParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.SolverParameter.repeatedFields_ = [2,22,27,3,34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SolverParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SolverParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SolverParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SolverParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    net: jspb.Message.getField(msg, 24),
    netParam: (f = msg.getNetParam()) && proto.caffe.NetParameter.toObject(includeInstance, f),
    trainNet: jspb.Message.getField(msg, 1),
    testNetList: jspb.Message.getField(msg, 2),
    trainNetParam: (f = msg.getTrainNetParam()) && proto.caffe.NetParameter.toObject(includeInstance, f),
    testNetParamList: jspb.Message.toObjectList(msg.getTestNetParamList(),
    proto.caffe.NetParameter.toObject, includeInstance),
    trainState: (f = msg.getTrainState()) && proto.caffe.NetState.toObject(includeInstance, f),
    testStateList: jspb.Message.toObjectList(msg.getTestStateList(),
    proto.caffe.NetState.toObject, includeInstance),
    testIterList: jspb.Message.getField(msg, 3),
    testInterval: jspb.Message.getFieldWithDefault(msg, 4, 0),
    testComputeLoss: jspb.Message.getFieldWithDefault(msg, 19, false),
    testInitialization: jspb.Message.getFieldWithDefault(msg, 32, true),
    baseLr: jspb.Message.getOptionalFloatingPointField(msg, 5),
    display: jspb.Message.getField(msg, 6),
    averageLoss: jspb.Message.getFieldWithDefault(msg, 33, 1),
    maxIter: jspb.Message.getField(msg, 7),
    iterSize: jspb.Message.getFieldWithDefault(msg, 36, 1),
    lrPolicy: jspb.Message.getField(msg, 8),
    gamma: jspb.Message.getOptionalFloatingPointField(msg, 9),
    power: jspb.Message.getOptionalFloatingPointField(msg, 10),
    momentum: jspb.Message.getOptionalFloatingPointField(msg, 11),
    weightDecay: jspb.Message.getOptionalFloatingPointField(msg, 12),
    regularizationType: jspb.Message.getFieldWithDefault(msg, 29, "L2"),
    stepsize: jspb.Message.getField(msg, 13),
    stepvalueList: jspb.Message.getField(msg, 34),
    clipGradients: +jspb.Message.getFieldWithDefault(msg, 35, -1.0),
    snapshot: jspb.Message.getFieldWithDefault(msg, 14, 0),
    snapshotPrefix: jspb.Message.getField(msg, 15),
    snapshotDiff: jspb.Message.getFieldWithDefault(msg, 16, false),
    snapshotFormat: jspb.Message.getFieldWithDefault(msg, 37, 1),
    solverMode: jspb.Message.getFieldWithDefault(msg, 17, 1),
    deviceId: jspb.Message.getFieldWithDefault(msg, 18, 0),
    randomSeed: jspb.Message.getFieldWithDefault(msg, 20, -1),
    type: jspb.Message.getFieldWithDefault(msg, 40, "SGD"),
    delta: +jspb.Message.getFieldWithDefault(msg, 31, 1.0E-8),
    momentum2: +jspb.Message.getFieldWithDefault(msg, 39, 0.999),
    rmsDecay: +jspb.Message.getFieldWithDefault(msg, 38, 0.99),
    debugInfo: jspb.Message.getFieldWithDefault(msg, 23, false),
    snapshotAfterTrain: jspb.Message.getFieldWithDefault(msg, 28, true),
    solverType: jspb.Message.getFieldWithDefault(msg, 30, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SolverParameter}
 */
proto.caffe.SolverParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SolverParameter;
  return proto.caffe.SolverParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SolverParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SolverParameter}
 */
proto.caffe.SolverParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setNet(value);
      break;
    case 25:
      var value = new proto.caffe.NetParameter;
      reader.readMessage(value,proto.caffe.NetParameter.deserializeBinaryFromReader);
      msg.setNetParam(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrainNet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTestNet(value);
      break;
    case 21:
      var value = new proto.caffe.NetParameter;
      reader.readMessage(value,proto.caffe.NetParameter.deserializeBinaryFromReader);
      msg.setTrainNetParam(value);
      break;
    case 22:
      var value = new proto.caffe.NetParameter;
      reader.readMessage(value,proto.caffe.NetParameter.deserializeBinaryFromReader);
      msg.addTestNetParam(value);
      break;
    case 26:
      var value = new proto.caffe.NetState;
      reader.readMessage(value,proto.caffe.NetState.deserializeBinaryFromReader);
      msg.setTrainState(value);
      break;
    case 27:
      var value = new proto.caffe.NetState;
      reader.readMessage(value,proto.caffe.NetState.deserializeBinaryFromReader);
      msg.addTestState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addTestIter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTestInterval(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestComputeLoss(value);
      break;
    case 32:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestInitialization(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBaseLr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisplay(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAverageLoss(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxIter(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIterSize(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLrPolicy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGamma(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPower(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMomentum(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeightDecay(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegularizationType(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStepsize(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addStepvalue(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setClipGradients(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnapshot(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnapshotPrefix(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSnapshotDiff(value);
      break;
    case 37:
      var value = /** @type {!proto.caffe.SolverParameter.SnapshotFormat} */ (reader.readEnum());
      msg.setSnapshotFormat(value);
      break;
    case 17:
      var value = /** @type {!proto.caffe.SolverParameter.SolverMode} */ (reader.readEnum());
      msg.setSolverMode(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeviceId(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomSeed(value);
      break;
    case 40:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDelta(value);
      break;
    case 39:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMomentum2(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRmsDecay(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 28:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSnapshotAfterTrain(value);
      break;
    case 30:
      var value = /** @type {!proto.caffe.SolverParameter.SolverType} */ (reader.readEnum());
      msg.setSolverType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SolverParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SolverParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SolverParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SolverParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getNetParam();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.caffe.NetParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestNetList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTrainNetParam();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.caffe.NetParameter.serializeBinaryToWriter
    );
  }
  f = message.getTestNetParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.caffe.NetParameter.serializeBinaryToWriter
    );
  }
  f = message.getTrainState();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.caffe.NetState.serializeBinaryToWriter
    );
  }
  f = message.getTestStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      proto.caffe.NetState.serializeBinaryToWriter
    );
  }
  f = message.getTestIterList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeBool(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeInt32(
      33,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 36));
  if (f != null) {
    writer.writeInt32(
      36,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 29));
  if (f != null) {
    writer.writeString(
      29,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getStepvalueList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      34,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 35));
  if (f != null) {
    writer.writeFloat(
      35,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {!proto.caffe.SolverParameter.SnapshotFormat} */ (jspb.Message.getField(message, 37));
  if (f != null) {
    writer.writeEnum(
      37,
      f
    );
  }
  f = /** @type {!proto.caffe.SolverParameter.SolverMode} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeInt64(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 40));
  if (f != null) {
    writer.writeString(
      40,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeFloat(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 39));
  if (f != null) {
    writer.writeFloat(
      39,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 38));
  if (f != null) {
    writer.writeFloat(
      38,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 28));
  if (f != null) {
    writer.writeBool(
      28,
      f
    );
  }
  f = /** @type {!proto.caffe.SolverParameter.SolverType} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeEnum(
      30,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.SolverParameter.SnapshotFormat = {
  HDF5: 0,
  BINARYPROTO: 1
};

/**
 * @enum {number}
 */
proto.caffe.SolverParameter.SolverMode = {
  CPU: 0,
  GPU: 1
};

/**
 * @enum {number}
 */
proto.caffe.SolverParameter.SolverType = {
  SGD: 0,
  NESTEROV: 1,
  ADAGRAD: 2,
  RMSPROP: 3,
  ADADELTA: 4,
  ADAM: 5
};

/**
 * optional string net = 24;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getNet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setNet = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.caffe.SolverParameter.prototype.clearNet = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasNet = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional NetParameter net_param = 25;
 * @return {?proto.caffe.NetParameter}
 */
proto.caffe.SolverParameter.prototype.getNetParam = function() {
  return /** @type{?proto.caffe.NetParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.NetParameter, 25));
};


/** @param {?proto.caffe.NetParameter|undefined} value */
proto.caffe.SolverParameter.prototype.setNetParam = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.caffe.SolverParameter.prototype.clearNetParam = function() {
  this.setNetParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasNetParam = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional string train_net = 1;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getTrainNet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setTrainNet = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SolverParameter.prototype.clearTrainNet = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTrainNet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string test_net = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.SolverParameter.prototype.getTestNetList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.caffe.SolverParameter.prototype.setTestNetList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.SolverParameter.prototype.addTestNet = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.SolverParameter.prototype.clearTestNetList = function() {
  this.setTestNetList([]);
};


/**
 * optional NetParameter train_net_param = 21;
 * @return {?proto.caffe.NetParameter}
 */
proto.caffe.SolverParameter.prototype.getTrainNetParam = function() {
  return /** @type{?proto.caffe.NetParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.NetParameter, 21));
};


/** @param {?proto.caffe.NetParameter|undefined} value */
proto.caffe.SolverParameter.prototype.setTrainNetParam = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.caffe.SolverParameter.prototype.clearTrainNetParam = function() {
  this.setTrainNetParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTrainNetParam = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated NetParameter test_net_param = 22;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetParameter>}
 */
proto.caffe.SolverParameter.prototype.getTestNetParamList = function() {
  return /** @type{!Array.<!proto.caffe.NetParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetParameter, 22));
};


/** @param {!Array.<!proto.caffe.NetParameter>} value */
proto.caffe.SolverParameter.prototype.setTestNetParamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.caffe.NetParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetParameter}
 */
proto.caffe.SolverParameter.prototype.addTestNetParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.caffe.NetParameter, opt_index);
};


proto.caffe.SolverParameter.prototype.clearTestNetParamList = function() {
  this.setTestNetParamList([]);
};


/**
 * optional NetState train_state = 26;
 * @return {?proto.caffe.NetState}
 */
proto.caffe.SolverParameter.prototype.getTrainState = function() {
  return /** @type{?proto.caffe.NetState} */ (
    jspb.Message.getWrapperField(this, proto.caffe.NetState, 26));
};


/** @param {?proto.caffe.NetState|undefined} value */
proto.caffe.SolverParameter.prototype.setTrainState = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.caffe.SolverParameter.prototype.clearTrainState = function() {
  this.setTrainState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTrainState = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * repeated NetState test_state = 27;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetState>}
 */
proto.caffe.SolverParameter.prototype.getTestStateList = function() {
  return /** @type{!Array.<!proto.caffe.NetState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetState, 27));
};


/** @param {!Array.<!proto.caffe.NetState>} value */
proto.caffe.SolverParameter.prototype.setTestStateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.caffe.NetState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetState}
 */
proto.caffe.SolverParameter.prototype.addTestState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.caffe.NetState, opt_index);
};


proto.caffe.SolverParameter.prototype.clearTestStateList = function() {
  this.setTestStateList([]);
};


/**
 * repeated int32 test_iter = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.SolverParameter.prototype.getTestIterList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.caffe.SolverParameter.prototype.setTestIterList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.SolverParameter.prototype.addTestIter = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.SolverParameter.prototype.clearTestIterList = function() {
  this.setTestIterList([]);
};


/**
 * optional int32 test_interval = 4;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getTestInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setTestInterval = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.SolverParameter.prototype.clearTestInterval = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTestInterval = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool test_compute_loss = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.SolverParameter.prototype.getTestComputeLoss = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.caffe.SolverParameter.prototype.setTestComputeLoss = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.caffe.SolverParameter.prototype.clearTestComputeLoss = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTestComputeLoss = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bool test_initialization = 32;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.SolverParameter.prototype.getTestInitialization = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 32, true));
};


/** @param {boolean} value */
proto.caffe.SolverParameter.prototype.setTestInitialization = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.caffe.SolverParameter.prototype.clearTestInitialization = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasTestInitialization = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional float base_lr = 5;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getBaseLr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setBaseLr = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.SolverParameter.prototype.clearBaseLr = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasBaseLr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 display = 6;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getDisplay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.SolverParameter.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 average_loss = 33;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getAverageLoss = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 1));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setAverageLoss = function(value) {
  jspb.Message.setField(this, 33, value);
};


proto.caffe.SolverParameter.prototype.clearAverageLoss = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasAverageLoss = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional int32 max_iter = 7;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getMaxIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setMaxIter = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.SolverParameter.prototype.clearMaxIter = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasMaxIter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 iter_size = 36;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getIterSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 1));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setIterSize = function(value) {
  jspb.Message.setField(this, 36, value);
};


proto.caffe.SolverParameter.prototype.clearIterSize = function() {
  jspb.Message.setField(this, 36, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasIterSize = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional string lr_policy = 8;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getLrPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setLrPolicy = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.SolverParameter.prototype.clearLrPolicy = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasLrPolicy = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float gamma = 9;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getGamma = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setGamma = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.SolverParameter.prototype.clearGamma = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasGamma = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float power = 10;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getPower = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setPower = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.SolverParameter.prototype.clearPower = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasPower = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float momentum = 11;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getMomentum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setMomentum = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.SolverParameter.prototype.clearMomentum = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasMomentum = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float weight_decay = 12;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getWeightDecay = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setWeightDecay = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.SolverParameter.prototype.clearWeightDecay = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasWeightDecay = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string regularization_type = 29;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getRegularizationType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, "L2"));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setRegularizationType = function(value) {
  jspb.Message.setField(this, 29, value);
};


proto.caffe.SolverParameter.prototype.clearRegularizationType = function() {
  jspb.Message.setField(this, 29, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasRegularizationType = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional int32 stepsize = 13;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getStepsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setStepsize = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.caffe.SolverParameter.prototype.clearStepsize = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasStepsize = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated int32 stepvalue = 34;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.SolverParameter.prototype.getStepvalueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 34));
};


/** @param {!Array.<number>} value */
proto.caffe.SolverParameter.prototype.setStepvalueList = function(value) {
  jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.SolverParameter.prototype.addStepvalue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


proto.caffe.SolverParameter.prototype.clearStepvalueList = function() {
  this.setStepvalueList([]);
};


/**
 * optional float clip_gradients = 35;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getClipGradients = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 35, -1.0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setClipGradients = function(value) {
  jspb.Message.setField(this, 35, value);
};


proto.caffe.SolverParameter.prototype.clearClipGradients = function() {
  jspb.Message.setField(this, 35, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasClipGradients = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional int32 snapshot = 14;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getSnapshot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setSnapshot = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.caffe.SolverParameter.prototype.clearSnapshot = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string snapshot_prefix = 15;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getSnapshotPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setSnapshotPrefix = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.caffe.SolverParameter.prototype.clearSnapshotPrefix = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSnapshotPrefix = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool snapshot_diff = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.SolverParameter.prototype.getSnapshotDiff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.caffe.SolverParameter.prototype.setSnapshotDiff = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.caffe.SolverParameter.prototype.clearSnapshotDiff = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSnapshotDiff = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SnapshotFormat snapshot_format = 37;
 * @return {!proto.caffe.SolverParameter.SnapshotFormat}
 */
proto.caffe.SolverParameter.prototype.getSnapshotFormat = function() {
  return /** @type {!proto.caffe.SolverParameter.SnapshotFormat} */ (jspb.Message.getFieldWithDefault(this, 37, 1));
};


/** @param {!proto.caffe.SolverParameter.SnapshotFormat} value */
proto.caffe.SolverParameter.prototype.setSnapshotFormat = function(value) {
  jspb.Message.setField(this, 37, value);
};


proto.caffe.SolverParameter.prototype.clearSnapshotFormat = function() {
  jspb.Message.setField(this, 37, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSnapshotFormat = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional SolverMode solver_mode = 17;
 * @return {!proto.caffe.SolverParameter.SolverMode}
 */
proto.caffe.SolverParameter.prototype.getSolverMode = function() {
  return /** @type {!proto.caffe.SolverParameter.SolverMode} */ (jspb.Message.getFieldWithDefault(this, 17, 1));
};


/** @param {!proto.caffe.SolverParameter.SolverMode} value */
proto.caffe.SolverParameter.prototype.setSolverMode = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.caffe.SolverParameter.prototype.clearSolverMode = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSolverMode = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 device_id = 18;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.caffe.SolverParameter.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int64 random_seed = 20;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getRandomSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, -1));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setRandomSeed = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.caffe.SolverParameter.prototype.clearRandomSeed = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasRandomSeed = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string type = 40;
 * @return {string}
 */
proto.caffe.SolverParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 40, "SGD"));
};


/** @param {string} value */
proto.caffe.SolverParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 40, value);
};


proto.caffe.SolverParameter.prototype.clearType = function() {
  jspb.Message.setField(this, 40, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional float delta = 31;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getDelta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 31, 1.0E-8));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setDelta = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.caffe.SolverParameter.prototype.clearDelta = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasDelta = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional float momentum2 = 39;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getMomentum2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 39, 0.999));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setMomentum2 = function(value) {
  jspb.Message.setField(this, 39, value);
};


proto.caffe.SolverParameter.prototype.clearMomentum2 = function() {
  jspb.Message.setField(this, 39, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasMomentum2 = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional float rms_decay = 38;
 * @return {number}
 */
proto.caffe.SolverParameter.prototype.getRmsDecay = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 38, 0.99));
};


/** @param {number} value */
proto.caffe.SolverParameter.prototype.setRmsDecay = function(value) {
  jspb.Message.setField(this, 38, value);
};


proto.caffe.SolverParameter.prototype.clearRmsDecay = function() {
  jspb.Message.setField(this, 38, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasRmsDecay = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional bool debug_info = 23;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.SolverParameter.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 23, false));
};


/** @param {boolean} value */
proto.caffe.SolverParameter.prototype.setDebugInfo = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.caffe.SolverParameter.prototype.clearDebugInfo = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasDebugInfo = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bool snapshot_after_train = 28;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.SolverParameter.prototype.getSnapshotAfterTrain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 28, true));
};


/** @param {boolean} value */
proto.caffe.SolverParameter.prototype.setSnapshotAfterTrain = function(value) {
  jspb.Message.setField(this, 28, value);
};


proto.caffe.SolverParameter.prototype.clearSnapshotAfterTrain = function() {
  jspb.Message.setField(this, 28, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSnapshotAfterTrain = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional SolverType solver_type = 30;
 * @return {!proto.caffe.SolverParameter.SolverType}
 */
proto.caffe.SolverParameter.prototype.getSolverType = function() {
  return /** @type {!proto.caffe.SolverParameter.SolverType} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {!proto.caffe.SolverParameter.SolverType} value */
proto.caffe.SolverParameter.prototype.setSolverType = function(value) {
  jspb.Message.setField(this, 30, value);
};


proto.caffe.SolverParameter.prototype.clearSolverType = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverParameter.prototype.hasSolverType = function() {
  return jspb.Message.getField(this, 30) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SolverState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.SolverState.repeatedFields_, null);
};
goog.inherits(proto.caffe.SolverState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SolverState.displayName = 'proto.caffe.SolverState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.SolverState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SolverState.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SolverState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SolverState} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SolverState.toObject = function(includeInstance, msg) {
  var f, obj = {
    iter: jspb.Message.getField(msg, 1),
    learnedNet: jspb.Message.getField(msg, 2),
    historyList: jspb.Message.toObjectList(msg.getHistoryList(),
    proto.caffe.BlobProto.toObject, includeInstance),
    currentStep: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SolverState}
 */
proto.caffe.SolverState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SolverState;
  return proto.caffe.SolverState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SolverState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SolverState}
 */
proto.caffe.SolverState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLearnedNet(value);
      break;
    case 3:
      var value = new proto.caffe.BlobProto;
      reader.readMessage(value,proto.caffe.BlobProto.deserializeBinaryFromReader);
      msg.addHistory(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentStep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SolverState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SolverState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SolverState} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SolverState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.caffe.BlobProto.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 iter = 1;
 * @return {number}
 */
proto.caffe.SolverState.prototype.getIter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.SolverState.prototype.setIter = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SolverState.prototype.clearIter = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverState.prototype.hasIter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string learned_net = 2;
 * @return {string}
 */
proto.caffe.SolverState.prototype.getLearnedNet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.caffe.SolverState.prototype.setLearnedNet = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.SolverState.prototype.clearLearnedNet = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverState.prototype.hasLearnedNet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BlobProto history = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobProto>}
 */
proto.caffe.SolverState.prototype.getHistoryList = function() {
  return /** @type{!Array.<!proto.caffe.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobProto, 3));
};


/** @param {!Array.<!proto.caffe.BlobProto>} value */
proto.caffe.SolverState.prototype.setHistoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.caffe.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.SolverState.prototype.addHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.caffe.BlobProto, opt_index);
};


proto.caffe.SolverState.prototype.clearHistoryList = function() {
  this.setHistoryList([]);
};


/**
 * optional int32 current_step = 4;
 * @return {number}
 */
proto.caffe.SolverState.prototype.getCurrentStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.SolverState.prototype.setCurrentStep = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.SolverState.prototype.clearCurrentStep = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SolverState.prototype.hasCurrentStep = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.NetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.NetState.repeatedFields_, null);
};
goog.inherits(proto.caffe.NetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.NetState.displayName = 'proto.caffe.NetState';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.NetState.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.NetState.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.NetState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.NetState} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.NetState.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getFieldWithDefault(msg, 1, 1),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stageList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.NetState}
 */
proto.caffe.NetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.NetState;
  return proto.caffe.NetState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.NetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.NetState}
 */
proto.caffe.NetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.NetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.NetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.NetState} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.NetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.Phase} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional Phase phase = 1;
 * @return {!proto.caffe.Phase}
 */
proto.caffe.NetState.prototype.getPhase = function() {
  return /** @type {!proto.caffe.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.caffe.Phase} value */
proto.caffe.NetState.prototype.setPhase = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.NetState.prototype.clearPhase = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetState.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.caffe.NetState.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.NetState.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.NetState.prototype.clearLevel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetState.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string stage = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.NetState.prototype.getStageList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.caffe.NetState.prototype.setStageList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.NetState.prototype.addStage = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.NetState.prototype.clearStageList = function() {
  this.setStageList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.NetStateRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.NetStateRule.repeatedFields_, null);
};
goog.inherits(proto.caffe.NetStateRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.NetStateRule.displayName = 'proto.caffe.NetStateRule';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.NetStateRule.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.NetStateRule.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.NetStateRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.NetStateRule} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.NetStateRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    phase: jspb.Message.getField(msg, 1),
    minLevel: jspb.Message.getField(msg, 2),
    maxLevel: jspb.Message.getField(msg, 3),
    stageList: jspb.Message.getField(msg, 4),
    notStageList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.NetStateRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.NetStateRule;
  return proto.caffe.NetStateRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.NetStateRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.NetStateRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addStage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addNotStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.NetStateRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.NetStateRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.NetStateRule} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.NetStateRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.Phase} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getNotStageList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional Phase phase = 1;
 * @return {!proto.caffe.Phase}
 */
proto.caffe.NetStateRule.prototype.getPhase = function() {
  return /** @type {!proto.caffe.Phase} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.caffe.Phase} value */
proto.caffe.NetStateRule.prototype.setPhase = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.NetStateRule.prototype.clearPhase = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetStateRule.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 min_level = 2;
 * @return {number}
 */
proto.caffe.NetStateRule.prototype.getMinLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.NetStateRule.prototype.setMinLevel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.NetStateRule.prototype.clearMinLevel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetStateRule.prototype.hasMinLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 max_level = 3;
 * @return {number}
 */
proto.caffe.NetStateRule.prototype.getMaxLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.NetStateRule.prototype.setMaxLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.NetStateRule.prototype.clearMaxLevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.NetStateRule.prototype.hasMaxLevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string stage = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.NetStateRule.prototype.getStageList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.caffe.NetStateRule.prototype.setStageList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.NetStateRule.prototype.addStage = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.caffe.NetStateRule.prototype.clearStageList = function() {
  this.setStageList([]);
};


/**
 * repeated string not_stage = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.NetStateRule.prototype.getNotStageList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.caffe.NetStateRule.prototype.setNotStageList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.NetStateRule.prototype.addNotStage = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.caffe.NetStateRule.prototype.clearNotStageList = function() {
  this.setNotStageList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ParamSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ParamSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ParamSpec.displayName = 'proto.caffe.ParamSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ParamSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ParamSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ParamSpec} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ParamSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    shareMode: jspb.Message.getField(msg, 2),
    lrMult: +jspb.Message.getFieldWithDefault(msg, 3, 1.0),
    decayMult: +jspb.Message.getFieldWithDefault(msg, 4, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ParamSpec}
 */
proto.caffe.ParamSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ParamSpec;
  return proto.caffe.ParamSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ParamSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ParamSpec}
 */
proto.caffe.ParamSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.caffe.ParamSpec.DimCheckMode} */ (reader.readEnum());
      msg.setShareMode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLrMult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDecayMult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ParamSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ParamSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ParamSpec} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ParamSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.caffe.ParamSpec.DimCheckMode} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.ParamSpec.DimCheckMode = {
  STRICT: 0,
  PERMISSIVE: 1
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.caffe.ParamSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.ParamSpec.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ParamSpec.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ParamSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DimCheckMode share_mode = 2;
 * @return {!proto.caffe.ParamSpec.DimCheckMode}
 */
proto.caffe.ParamSpec.prototype.getShareMode = function() {
  return /** @type {!proto.caffe.ParamSpec.DimCheckMode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.caffe.ParamSpec.DimCheckMode} value */
proto.caffe.ParamSpec.prototype.setShareMode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ParamSpec.prototype.clearShareMode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ParamSpec.prototype.hasShareMode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float lr_mult = 3;
 * @return {number}
 */
proto.caffe.ParamSpec.prototype.getLrMult = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 1.0));
};


/** @param {number} value */
proto.caffe.ParamSpec.prototype.setLrMult = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ParamSpec.prototype.clearLrMult = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ParamSpec.prototype.hasLrMult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float decay_mult = 4;
 * @return {number}
 */
proto.caffe.ParamSpec.prototype.getDecayMult = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 1.0));
};


/** @param {number} value */
proto.caffe.ParamSpec.prototype.setDecayMult = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.ParamSpec.prototype.clearDecayMult = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ParamSpec.prototype.hasDecayMult = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.LayerParameter.displayName = 'proto.caffe.LayerParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.LayerParameter.repeatedFields_ = [3,4,5,6,7,11,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    bottomList: jspb.Message.getField(msg, 3),
    topList: jspb.Message.getField(msg, 4),
    phase: jspb.Message.getField(msg, 10),
    lossWeightList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    paramList: jspb.Message.toObjectList(msg.getParamList(),
    proto.caffe.ParamSpec.toObject, includeInstance),
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.caffe.BlobProto.toObject, includeInstance),
    propagateDownList: jspb.Message.getField(msg, 11),
    includeList: jspb.Message.toObjectList(msg.getIncludeList(),
    proto.caffe.NetStateRule.toObject, includeInstance),
    excludeList: jspb.Message.toObjectList(msg.getExcludeList(),
    proto.caffe.NetStateRule.toObject, includeInstance),
    transformParam: (f = msg.getTransformParam()) && proto.caffe.TransformationParameter.toObject(includeInstance, f),
    lossParam: (f = msg.getLossParam()) && proto.caffe.LossParameter.toObject(includeInstance, f),
    accuracyParam: (f = msg.getAccuracyParam()) && proto.caffe.AccuracyParameter.toObject(includeInstance, f),
    argmaxParam: (f = msg.getArgmaxParam()) && proto.caffe.ArgMaxParameter.toObject(includeInstance, f),
    batchNormParam: (f = msg.getBatchNormParam()) && proto.caffe.BatchNormParameter.toObject(includeInstance, f),
    biasParam: (f = msg.getBiasParam()) && proto.caffe.BiasParameter.toObject(includeInstance, f),
    concatParam: (f = msg.getConcatParam()) && proto.caffe.ConcatParameter.toObject(includeInstance, f),
    contrastiveLossParam: (f = msg.getContrastiveLossParam()) && proto.caffe.ContrastiveLossParameter.toObject(includeInstance, f),
    convolutionParam: (f = msg.getConvolutionParam()) && proto.caffe.ConvolutionParameter.toObject(includeInstance, f),
    cropParam: (f = msg.getCropParam()) && proto.caffe.CropParameter.toObject(includeInstance, f),
    dataParam: (f = msg.getDataParam()) && proto.caffe.DataParameter.toObject(includeInstance, f),
    dropoutParam: (f = msg.getDropoutParam()) && proto.caffe.DropoutParameter.toObject(includeInstance, f),
    dummyDataParam: (f = msg.getDummyDataParam()) && proto.caffe.DummyDataParameter.toObject(includeInstance, f),
    eltwiseParam: (f = msg.getEltwiseParam()) && proto.caffe.EltwiseParameter.toObject(includeInstance, f),
    eluParam: (f = msg.getEluParam()) && proto.caffe.ELUParameter.toObject(includeInstance, f),
    embedParam: (f = msg.getEmbedParam()) && proto.caffe.EmbedParameter.toObject(includeInstance, f),
    expParam: (f = msg.getExpParam()) && proto.caffe.ExpParameter.toObject(includeInstance, f),
    flattenParam: (f = msg.getFlattenParam()) && proto.caffe.FlattenParameter.toObject(includeInstance, f),
    hdf5DataParam: (f = msg.getHdf5DataParam()) && proto.caffe.HDF5DataParameter.toObject(includeInstance, f),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.caffe.HDF5OutputParameter.toObject(includeInstance, f),
    hingeLossParam: (f = msg.getHingeLossParam()) && proto.caffe.HingeLossParameter.toObject(includeInstance, f),
    imageDataParam: (f = msg.getImageDataParam()) && proto.caffe.ImageDataParameter.toObject(includeInstance, f),
    infogainLossParam: (f = msg.getInfogainLossParam()) && proto.caffe.InfogainLossParameter.toObject(includeInstance, f),
    innerProductParam: (f = msg.getInnerProductParam()) && proto.caffe.InnerProductParameter.toObject(includeInstance, f),
    inputParam: (f = msg.getInputParam()) && proto.caffe.InputParameter.toObject(includeInstance, f),
    logParam: (f = msg.getLogParam()) && proto.caffe.LogParameter.toObject(includeInstance, f),
    lrnParam: (f = msg.getLrnParam()) && proto.caffe.LRNParameter.toObject(includeInstance, f),
    memoryDataParam: (f = msg.getMemoryDataParam()) && proto.caffe.MemoryDataParameter.toObject(includeInstance, f),
    mvnParam: (f = msg.getMvnParam()) && proto.caffe.MVNParameter.toObject(includeInstance, f),
    parameterParam: (f = msg.getParameterParam()) && proto.caffe.ParameterParameter.toObject(includeInstance, f),
    poolingParam: (f = msg.getPoolingParam()) && proto.caffe.PoolingParameter.toObject(includeInstance, f),
    powerParam: (f = msg.getPowerParam()) && proto.caffe.PowerParameter.toObject(includeInstance, f),
    preluParam: (f = msg.getPreluParam()) && proto.caffe.PReLUParameter.toObject(includeInstance, f),
    pythonParam: (f = msg.getPythonParam()) && proto.caffe.PythonParameter.toObject(includeInstance, f),
    recurrentParam: (f = msg.getRecurrentParam()) && proto.caffe.RecurrentParameter.toObject(includeInstance, f),
    reductionParam: (f = msg.getReductionParam()) && proto.caffe.ReductionParameter.toObject(includeInstance, f),
    reluParam: (f = msg.getReluParam()) && proto.caffe.ReLUParameter.toObject(includeInstance, f),
    reshapeParam: (f = msg.getReshapeParam()) && proto.caffe.ReshapeParameter.toObject(includeInstance, f),
    scaleParam: (f = msg.getScaleParam()) && proto.caffe.ScaleParameter.toObject(includeInstance, f),
    sigmoidParam: (f = msg.getSigmoidParam()) && proto.caffe.SigmoidParameter.toObject(includeInstance, f),
    softmaxParam: (f = msg.getSoftmaxParam()) && proto.caffe.SoftmaxParameter.toObject(includeInstance, f),
    sppParam: (f = msg.getSppParam()) && proto.caffe.SPPParameter.toObject(includeInstance, f),
    sliceParam: (f = msg.getSliceParam()) && proto.caffe.SliceParameter.toObject(includeInstance, f),
    tanhParam: (f = msg.getTanhParam()) && proto.caffe.TanHParameter.toObject(includeInstance, f),
    thresholdParam: (f = msg.getThresholdParam()) && proto.caffe.ThresholdParameter.toObject(includeInstance, f),
    tileParam: (f = msg.getTileParam()) && proto.caffe.TileParameter.toObject(includeInstance, f),
    windowDataParam: (f = msg.getWindowDataParam()) && proto.caffe.WindowDataParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.LayerParameter}
 */
proto.caffe.LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.LayerParameter;
  return proto.caffe.LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.LayerParameter}
 */
proto.caffe.LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBottom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTop(value);
      break;
    case 10:
      var value = /** @type {!proto.caffe.Phase} */ (reader.readEnum());
      msg.setPhase(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addLossWeight(value);
      break;
    case 6:
      var value = new proto.caffe.ParamSpec;
      reader.readMessage(value,proto.caffe.ParamSpec.deserializeBinaryFromReader);
      msg.addParam(value);
      break;
    case 7:
      var value = new proto.caffe.BlobProto;
      reader.readMessage(value,proto.caffe.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.addPropagateDown(value);
      break;
    case 8:
      var value = new proto.caffe.NetStateRule;
      reader.readMessage(value,proto.caffe.NetStateRule.deserializeBinaryFromReader);
      msg.addInclude(value);
      break;
    case 9:
      var value = new proto.caffe.NetStateRule;
      reader.readMessage(value,proto.caffe.NetStateRule.deserializeBinaryFromReader);
      msg.addExclude(value);
      break;
    case 100:
      var value = new proto.caffe.TransformationParameter;
      reader.readMessage(value,proto.caffe.TransformationParameter.deserializeBinaryFromReader);
      msg.setTransformParam(value);
      break;
    case 101:
      var value = new proto.caffe.LossParameter;
      reader.readMessage(value,proto.caffe.LossParameter.deserializeBinaryFromReader);
      msg.setLossParam(value);
      break;
    case 102:
      var value = new proto.caffe.AccuracyParameter;
      reader.readMessage(value,proto.caffe.AccuracyParameter.deserializeBinaryFromReader);
      msg.setAccuracyParam(value);
      break;
    case 103:
      var value = new proto.caffe.ArgMaxParameter;
      reader.readMessage(value,proto.caffe.ArgMaxParameter.deserializeBinaryFromReader);
      msg.setArgmaxParam(value);
      break;
    case 139:
      var value = new proto.caffe.BatchNormParameter;
      reader.readMessage(value,proto.caffe.BatchNormParameter.deserializeBinaryFromReader);
      msg.setBatchNormParam(value);
      break;
    case 141:
      var value = new proto.caffe.BiasParameter;
      reader.readMessage(value,proto.caffe.BiasParameter.deserializeBinaryFromReader);
      msg.setBiasParam(value);
      break;
    case 104:
      var value = new proto.caffe.ConcatParameter;
      reader.readMessage(value,proto.caffe.ConcatParameter.deserializeBinaryFromReader);
      msg.setConcatParam(value);
      break;
    case 105:
      var value = new proto.caffe.ContrastiveLossParameter;
      reader.readMessage(value,proto.caffe.ContrastiveLossParameter.deserializeBinaryFromReader);
      msg.setContrastiveLossParam(value);
      break;
    case 106:
      var value = new proto.caffe.ConvolutionParameter;
      reader.readMessage(value,proto.caffe.ConvolutionParameter.deserializeBinaryFromReader);
      msg.setConvolutionParam(value);
      break;
    case 144:
      var value = new proto.caffe.CropParameter;
      reader.readMessage(value,proto.caffe.CropParameter.deserializeBinaryFromReader);
      msg.setCropParam(value);
      break;
    case 107:
      var value = new proto.caffe.DataParameter;
      reader.readMessage(value,proto.caffe.DataParameter.deserializeBinaryFromReader);
      msg.setDataParam(value);
      break;
    case 108:
      var value = new proto.caffe.DropoutParameter;
      reader.readMessage(value,proto.caffe.DropoutParameter.deserializeBinaryFromReader);
      msg.setDropoutParam(value);
      break;
    case 109:
      var value = new proto.caffe.DummyDataParameter;
      reader.readMessage(value,proto.caffe.DummyDataParameter.deserializeBinaryFromReader);
      msg.setDummyDataParam(value);
      break;
    case 110:
      var value = new proto.caffe.EltwiseParameter;
      reader.readMessage(value,proto.caffe.EltwiseParameter.deserializeBinaryFromReader);
      msg.setEltwiseParam(value);
      break;
    case 140:
      var value = new proto.caffe.ELUParameter;
      reader.readMessage(value,proto.caffe.ELUParameter.deserializeBinaryFromReader);
      msg.setEluParam(value);
      break;
    case 137:
      var value = new proto.caffe.EmbedParameter;
      reader.readMessage(value,proto.caffe.EmbedParameter.deserializeBinaryFromReader);
      msg.setEmbedParam(value);
      break;
    case 111:
      var value = new proto.caffe.ExpParameter;
      reader.readMessage(value,proto.caffe.ExpParameter.deserializeBinaryFromReader);
      msg.setExpParam(value);
      break;
    case 135:
      var value = new proto.caffe.FlattenParameter;
      reader.readMessage(value,proto.caffe.FlattenParameter.deserializeBinaryFromReader);
      msg.setFlattenParam(value);
      break;
    case 112:
      var value = new proto.caffe.HDF5DataParameter;
      reader.readMessage(value,proto.caffe.HDF5DataParameter.deserializeBinaryFromReader);
      msg.setHdf5DataParam(value);
      break;
    case 113:
      var value = new proto.caffe.HDF5OutputParameter;
      reader.readMessage(value,proto.caffe.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    case 114:
      var value = new proto.caffe.HingeLossParameter;
      reader.readMessage(value,proto.caffe.HingeLossParameter.deserializeBinaryFromReader);
      msg.setHingeLossParam(value);
      break;
    case 115:
      var value = new proto.caffe.ImageDataParameter;
      reader.readMessage(value,proto.caffe.ImageDataParameter.deserializeBinaryFromReader);
      msg.setImageDataParam(value);
      break;
    case 116:
      var value = new proto.caffe.InfogainLossParameter;
      reader.readMessage(value,proto.caffe.InfogainLossParameter.deserializeBinaryFromReader);
      msg.setInfogainLossParam(value);
      break;
    case 117:
      var value = new proto.caffe.InnerProductParameter;
      reader.readMessage(value,proto.caffe.InnerProductParameter.deserializeBinaryFromReader);
      msg.setInnerProductParam(value);
      break;
    case 143:
      var value = new proto.caffe.InputParameter;
      reader.readMessage(value,proto.caffe.InputParameter.deserializeBinaryFromReader);
      msg.setInputParam(value);
      break;
    case 134:
      var value = new proto.caffe.LogParameter;
      reader.readMessage(value,proto.caffe.LogParameter.deserializeBinaryFromReader);
      msg.setLogParam(value);
      break;
    case 118:
      var value = new proto.caffe.LRNParameter;
      reader.readMessage(value,proto.caffe.LRNParameter.deserializeBinaryFromReader);
      msg.setLrnParam(value);
      break;
    case 119:
      var value = new proto.caffe.MemoryDataParameter;
      reader.readMessage(value,proto.caffe.MemoryDataParameter.deserializeBinaryFromReader);
      msg.setMemoryDataParam(value);
      break;
    case 120:
      var value = new proto.caffe.MVNParameter;
      reader.readMessage(value,proto.caffe.MVNParameter.deserializeBinaryFromReader);
      msg.setMvnParam(value);
      break;
    case 145:
      var value = new proto.caffe.ParameterParameter;
      reader.readMessage(value,proto.caffe.ParameterParameter.deserializeBinaryFromReader);
      msg.setParameterParam(value);
      break;
    case 121:
      var value = new proto.caffe.PoolingParameter;
      reader.readMessage(value,proto.caffe.PoolingParameter.deserializeBinaryFromReader);
      msg.setPoolingParam(value);
      break;
    case 122:
      var value = new proto.caffe.PowerParameter;
      reader.readMessage(value,proto.caffe.PowerParameter.deserializeBinaryFromReader);
      msg.setPowerParam(value);
      break;
    case 131:
      var value = new proto.caffe.PReLUParameter;
      reader.readMessage(value,proto.caffe.PReLUParameter.deserializeBinaryFromReader);
      msg.setPreluParam(value);
      break;
    case 130:
      var value = new proto.caffe.PythonParameter;
      reader.readMessage(value,proto.caffe.PythonParameter.deserializeBinaryFromReader);
      msg.setPythonParam(value);
      break;
    case 146:
      var value = new proto.caffe.RecurrentParameter;
      reader.readMessage(value,proto.caffe.RecurrentParameter.deserializeBinaryFromReader);
      msg.setRecurrentParam(value);
      break;
    case 136:
      var value = new proto.caffe.ReductionParameter;
      reader.readMessage(value,proto.caffe.ReductionParameter.deserializeBinaryFromReader);
      msg.setReductionParam(value);
      break;
    case 123:
      var value = new proto.caffe.ReLUParameter;
      reader.readMessage(value,proto.caffe.ReLUParameter.deserializeBinaryFromReader);
      msg.setReluParam(value);
      break;
    case 133:
      var value = new proto.caffe.ReshapeParameter;
      reader.readMessage(value,proto.caffe.ReshapeParameter.deserializeBinaryFromReader);
      msg.setReshapeParam(value);
      break;
    case 142:
      var value = new proto.caffe.ScaleParameter;
      reader.readMessage(value,proto.caffe.ScaleParameter.deserializeBinaryFromReader);
      msg.setScaleParam(value);
      break;
    case 124:
      var value = new proto.caffe.SigmoidParameter;
      reader.readMessage(value,proto.caffe.SigmoidParameter.deserializeBinaryFromReader);
      msg.setSigmoidParam(value);
      break;
    case 125:
      var value = new proto.caffe.SoftmaxParameter;
      reader.readMessage(value,proto.caffe.SoftmaxParameter.deserializeBinaryFromReader);
      msg.setSoftmaxParam(value);
      break;
    case 132:
      var value = new proto.caffe.SPPParameter;
      reader.readMessage(value,proto.caffe.SPPParameter.deserializeBinaryFromReader);
      msg.setSppParam(value);
      break;
    case 126:
      var value = new proto.caffe.SliceParameter;
      reader.readMessage(value,proto.caffe.SliceParameter.deserializeBinaryFromReader);
      msg.setSliceParam(value);
      break;
    case 127:
      var value = new proto.caffe.TanHParameter;
      reader.readMessage(value,proto.caffe.TanHParameter.deserializeBinaryFromReader);
      msg.setTanhParam(value);
      break;
    case 128:
      var value = new proto.caffe.ThresholdParameter;
      reader.readMessage(value,proto.caffe.ThresholdParameter.deserializeBinaryFromReader);
      msg.setThresholdParam(value);
      break;
    case 138:
      var value = new proto.caffe.TileParameter;
      reader.readMessage(value,proto.caffe.TileParameter.deserializeBinaryFromReader);
      msg.setTileParam(value);
      break;
    case 129:
      var value = new proto.caffe.WindowDataParameter;
      reader.readMessage(value,proto.caffe.WindowDataParameter.deserializeBinaryFromReader);
      msg.setWindowDataParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBottomList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTopList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = /** @type {!proto.caffe.Phase} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getLossWeightList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      5,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.caffe.ParamSpec.serializeBinaryToWriter
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.caffe.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getPropagateDownList();
  if (f.length > 0) {
    writer.writeRepeatedBool(
      11,
      f
    );
  }
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.caffe.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getExcludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.caffe.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getTransformParam();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.caffe.TransformationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLossParam();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.caffe.LossParameter.serializeBinaryToWriter
    );
  }
  f = message.getAccuracyParam();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.caffe.AccuracyParameter.serializeBinaryToWriter
    );
  }
  f = message.getArgmaxParam();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.caffe.ArgMaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getBatchNormParam();
  if (f != null) {
    writer.writeMessage(
      139,
      f,
      proto.caffe.BatchNormParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasParam();
  if (f != null) {
    writer.writeMessage(
      141,
      f,
      proto.caffe.BiasParameter.serializeBinaryToWriter
    );
  }
  f = message.getConcatParam();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.caffe.ConcatParameter.serializeBinaryToWriter
    );
  }
  f = message.getContrastiveLossParam();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.caffe.ContrastiveLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getConvolutionParam();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.caffe.ConvolutionParameter.serializeBinaryToWriter
    );
  }
  f = message.getCropParam();
  if (f != null) {
    writer.writeMessage(
      144,
      f,
      proto.caffe.CropParameter.serializeBinaryToWriter
    );
  }
  f = message.getDataParam();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.caffe.DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getDropoutParam();
  if (f != null) {
    writer.writeMessage(
      108,
      f,
      proto.caffe.DropoutParameter.serializeBinaryToWriter
    );
  }
  f = message.getDummyDataParam();
  if (f != null) {
    writer.writeMessage(
      109,
      f,
      proto.caffe.DummyDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getEltwiseParam();
  if (f != null) {
    writer.writeMessage(
      110,
      f,
      proto.caffe.EltwiseParameter.serializeBinaryToWriter
    );
  }
  f = message.getEluParam();
  if (f != null) {
    writer.writeMessage(
      140,
      f,
      proto.caffe.ELUParameter.serializeBinaryToWriter
    );
  }
  f = message.getEmbedParam();
  if (f != null) {
    writer.writeMessage(
      137,
      f,
      proto.caffe.EmbedParameter.serializeBinaryToWriter
    );
  }
  f = message.getExpParam();
  if (f != null) {
    writer.writeMessage(
      111,
      f,
      proto.caffe.ExpParameter.serializeBinaryToWriter
    );
  }
  f = message.getFlattenParam();
  if (f != null) {
    writer.writeMessage(
      135,
      f,
      proto.caffe.FlattenParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5DataParam();
  if (f != null) {
    writer.writeMessage(
      112,
      f,
      proto.caffe.HDF5DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      113,
      f,
      proto.caffe.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getHingeLossParam();
  if (f != null) {
    writer.writeMessage(
      114,
      f,
      proto.caffe.HingeLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getImageDataParam();
  if (f != null) {
    writer.writeMessage(
      115,
      f,
      proto.caffe.ImageDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getInfogainLossParam();
  if (f != null) {
    writer.writeMessage(
      116,
      f,
      proto.caffe.InfogainLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getInnerProductParam();
  if (f != null) {
    writer.writeMessage(
      117,
      f,
      proto.caffe.InnerProductParameter.serializeBinaryToWriter
    );
  }
  f = message.getInputParam();
  if (f != null) {
    writer.writeMessage(
      143,
      f,
      proto.caffe.InputParameter.serializeBinaryToWriter
    );
  }
  f = message.getLogParam();
  if (f != null) {
    writer.writeMessage(
      134,
      f,
      proto.caffe.LogParameter.serializeBinaryToWriter
    );
  }
  f = message.getLrnParam();
  if (f != null) {
    writer.writeMessage(
      118,
      f,
      proto.caffe.LRNParameter.serializeBinaryToWriter
    );
  }
  f = message.getMemoryDataParam();
  if (f != null) {
    writer.writeMessage(
      119,
      f,
      proto.caffe.MemoryDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getMvnParam();
  if (f != null) {
    writer.writeMessage(
      120,
      f,
      proto.caffe.MVNParameter.serializeBinaryToWriter
    );
  }
  f = message.getParameterParam();
  if (f != null) {
    writer.writeMessage(
      145,
      f,
      proto.caffe.ParameterParameter.serializeBinaryToWriter
    );
  }
  f = message.getPoolingParam();
  if (f != null) {
    writer.writeMessage(
      121,
      f,
      proto.caffe.PoolingParameter.serializeBinaryToWriter
    );
  }
  f = message.getPowerParam();
  if (f != null) {
    writer.writeMessage(
      122,
      f,
      proto.caffe.PowerParameter.serializeBinaryToWriter
    );
  }
  f = message.getPreluParam();
  if (f != null) {
    writer.writeMessage(
      131,
      f,
      proto.caffe.PReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getPythonParam();
  if (f != null) {
    writer.writeMessage(
      130,
      f,
      proto.caffe.PythonParameter.serializeBinaryToWriter
    );
  }
  f = message.getRecurrentParam();
  if (f != null) {
    writer.writeMessage(
      146,
      f,
      proto.caffe.RecurrentParameter.serializeBinaryToWriter
    );
  }
  f = message.getReductionParam();
  if (f != null) {
    writer.writeMessage(
      136,
      f,
      proto.caffe.ReductionParameter.serializeBinaryToWriter
    );
  }
  f = message.getReluParam();
  if (f != null) {
    writer.writeMessage(
      123,
      f,
      proto.caffe.ReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getReshapeParam();
  if (f != null) {
    writer.writeMessage(
      133,
      f,
      proto.caffe.ReshapeParameter.serializeBinaryToWriter
    );
  }
  f = message.getScaleParam();
  if (f != null) {
    writer.writeMessage(
      142,
      f,
      proto.caffe.ScaleParameter.serializeBinaryToWriter
    );
  }
  f = message.getSigmoidParam();
  if (f != null) {
    writer.writeMessage(
      124,
      f,
      proto.caffe.SigmoidParameter.serializeBinaryToWriter
    );
  }
  f = message.getSoftmaxParam();
  if (f != null) {
    writer.writeMessage(
      125,
      f,
      proto.caffe.SoftmaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getSppParam();
  if (f != null) {
    writer.writeMessage(
      132,
      f,
      proto.caffe.SPPParameter.serializeBinaryToWriter
    );
  }
  f = message.getSliceParam();
  if (f != null) {
    writer.writeMessage(
      126,
      f,
      proto.caffe.SliceParameter.serializeBinaryToWriter
    );
  }
  f = message.getTanhParam();
  if (f != null) {
    writer.writeMessage(
      127,
      f,
      proto.caffe.TanHParameter.serializeBinaryToWriter
    );
  }
  f = message.getThresholdParam();
  if (f != null) {
    writer.writeMessage(
      128,
      f,
      proto.caffe.ThresholdParameter.serializeBinaryToWriter
    );
  }
  f = message.getTileParam();
  if (f != null) {
    writer.writeMessage(
      138,
      f,
      proto.caffe.TileParameter.serializeBinaryToWriter
    );
  }
  f = message.getWindowDataParam();
  if (f != null) {
    writer.writeMessage(
      129,
      f,
      proto.caffe.WindowDataParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.caffe.LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.LayerParameter.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.LayerParameter.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.caffe.LayerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.caffe.LayerParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.LayerParameter.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string bottom = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.LayerParameter.prototype.getBottomList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.caffe.LayerParameter.prototype.setBottomList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.LayerParameter.prototype.addBottom = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.LayerParameter.prototype.clearBottomList = function() {
  this.setBottomList([]);
};


/**
 * repeated string top = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.LayerParameter.prototype.getTopList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.caffe.LayerParameter.prototype.setTopList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.LayerParameter.prototype.addTop = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.caffe.LayerParameter.prototype.clearTopList = function() {
  this.setTopList([]);
};


/**
 * optional Phase phase = 10;
 * @return {!proto.caffe.Phase}
 */
proto.caffe.LayerParameter.prototype.getPhase = function() {
  return /** @type {!proto.caffe.Phase} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.caffe.Phase} value */
proto.caffe.LayerParameter.prototype.setPhase = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.LayerParameter.prototype.clearPhase = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasPhase = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated float loss_weight = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.LayerParameter.prototype.getLossWeightList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.caffe.LayerParameter.prototype.setLossWeightList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.LayerParameter.prototype.addLossWeight = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.caffe.LayerParameter.prototype.clearLossWeightList = function() {
  this.setLossWeightList([]);
};


/**
 * repeated ParamSpec param = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.ParamSpec>}
 */
proto.caffe.LayerParameter.prototype.getParamList = function() {
  return /** @type{!Array.<!proto.caffe.ParamSpec>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.ParamSpec, 6));
};


/** @param {!Array.<!proto.caffe.ParamSpec>} value */
proto.caffe.LayerParameter.prototype.setParamList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.caffe.ParamSpec=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.ParamSpec}
 */
proto.caffe.LayerParameter.prototype.addParam = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.caffe.ParamSpec, opt_index);
};


proto.caffe.LayerParameter.prototype.clearParamList = function() {
  this.setParamList([]);
};


/**
 * repeated BlobProto blobs = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobProto>}
 */
proto.caffe.LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array.<!proto.caffe.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobProto, 7));
};


/** @param {!Array.<!proto.caffe.BlobProto>} value */
proto.caffe.LayerParameter.prototype.setBlobsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.caffe.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.caffe.BlobProto, opt_index);
};


proto.caffe.LayerParameter.prototype.clearBlobsList = function() {
  this.setBlobsList([]);
};


/**
 * repeated bool propagate_down = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.caffe.LayerParameter.prototype.getPropagateDownList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 11));
};


/** @param {!Array.<boolean>} value */
proto.caffe.LayerParameter.prototype.setPropagateDownList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.caffe.LayerParameter.prototype.addPropagateDown = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.caffe.LayerParameter.prototype.clearPropagateDownList = function() {
  this.setPropagateDownList([]);
};


/**
 * repeated NetStateRule include = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetStateRule>}
 */
proto.caffe.LayerParameter.prototype.getIncludeList = function() {
  return /** @type{!Array.<!proto.caffe.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetStateRule, 8));
};


/** @param {!Array.<!proto.caffe.NetStateRule>} value */
proto.caffe.LayerParameter.prototype.setIncludeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.caffe.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.LayerParameter.prototype.addInclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.caffe.NetStateRule, opt_index);
};


proto.caffe.LayerParameter.prototype.clearIncludeList = function() {
  this.setIncludeList([]);
};


/**
 * repeated NetStateRule exclude = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetStateRule>}
 */
proto.caffe.LayerParameter.prototype.getExcludeList = function() {
  return /** @type{!Array.<!proto.caffe.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetStateRule, 9));
};


/** @param {!Array.<!proto.caffe.NetStateRule>} value */
proto.caffe.LayerParameter.prototype.setExcludeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.caffe.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.LayerParameter.prototype.addExclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.caffe.NetStateRule, opt_index);
};


proto.caffe.LayerParameter.prototype.clearExcludeList = function() {
  this.setExcludeList([]);
};


/**
 * optional TransformationParameter transform_param = 100;
 * @return {?proto.caffe.TransformationParameter}
 */
proto.caffe.LayerParameter.prototype.getTransformParam = function() {
  return /** @type{?proto.caffe.TransformationParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.TransformationParameter, 100));
};


/** @param {?proto.caffe.TransformationParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setTransformParam = function(value) {
  jspb.Message.setWrapperField(this, 100, value);
};


proto.caffe.LayerParameter.prototype.clearTransformParam = function() {
  this.setTransformParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasTransformParam = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional LossParameter loss_param = 101;
 * @return {?proto.caffe.LossParameter}
 */
proto.caffe.LayerParameter.prototype.getLossParam = function() {
  return /** @type{?proto.caffe.LossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.LossParameter, 101));
};


/** @param {?proto.caffe.LossParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setLossParam = function(value) {
  jspb.Message.setWrapperField(this, 101, value);
};


proto.caffe.LayerParameter.prototype.clearLossParam = function() {
  this.setLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasLossParam = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional AccuracyParameter accuracy_param = 102;
 * @return {?proto.caffe.AccuracyParameter}
 */
proto.caffe.LayerParameter.prototype.getAccuracyParam = function() {
  return /** @type{?proto.caffe.AccuracyParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.AccuracyParameter, 102));
};


/** @param {?proto.caffe.AccuracyParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setAccuracyParam = function(value) {
  jspb.Message.setWrapperField(this, 102, value);
};


proto.caffe.LayerParameter.prototype.clearAccuracyParam = function() {
  this.setAccuracyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasAccuracyParam = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional ArgMaxParameter argmax_param = 103;
 * @return {?proto.caffe.ArgMaxParameter}
 */
proto.caffe.LayerParameter.prototype.getArgmaxParam = function() {
  return /** @type{?proto.caffe.ArgMaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ArgMaxParameter, 103));
};


/** @param {?proto.caffe.ArgMaxParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setArgmaxParam = function(value) {
  jspb.Message.setWrapperField(this, 103, value);
};


proto.caffe.LayerParameter.prototype.clearArgmaxParam = function() {
  this.setArgmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasArgmaxParam = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional BatchNormParameter batch_norm_param = 139;
 * @return {?proto.caffe.BatchNormParameter}
 */
proto.caffe.LayerParameter.prototype.getBatchNormParam = function() {
  return /** @type{?proto.caffe.BatchNormParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.BatchNormParameter, 139));
};


/** @param {?proto.caffe.BatchNormParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setBatchNormParam = function(value) {
  jspb.Message.setWrapperField(this, 139, value);
};


proto.caffe.LayerParameter.prototype.clearBatchNormParam = function() {
  this.setBatchNormParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasBatchNormParam = function() {
  return jspb.Message.getField(this, 139) != null;
};


/**
 * optional BiasParameter bias_param = 141;
 * @return {?proto.caffe.BiasParameter}
 */
proto.caffe.LayerParameter.prototype.getBiasParam = function() {
  return /** @type{?proto.caffe.BiasParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.BiasParameter, 141));
};


/** @param {?proto.caffe.BiasParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setBiasParam = function(value) {
  jspb.Message.setWrapperField(this, 141, value);
};


proto.caffe.LayerParameter.prototype.clearBiasParam = function() {
  this.setBiasParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasBiasParam = function() {
  return jspb.Message.getField(this, 141) != null;
};


/**
 * optional ConcatParameter concat_param = 104;
 * @return {?proto.caffe.ConcatParameter}
 */
proto.caffe.LayerParameter.prototype.getConcatParam = function() {
  return /** @type{?proto.caffe.ConcatParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ConcatParameter, 104));
};


/** @param {?proto.caffe.ConcatParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setConcatParam = function(value) {
  jspb.Message.setWrapperField(this, 104, value);
};


proto.caffe.LayerParameter.prototype.clearConcatParam = function() {
  this.setConcatParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasConcatParam = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional ContrastiveLossParameter contrastive_loss_param = 105;
 * @return {?proto.caffe.ContrastiveLossParameter}
 */
proto.caffe.LayerParameter.prototype.getContrastiveLossParam = function() {
  return /** @type{?proto.caffe.ContrastiveLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ContrastiveLossParameter, 105));
};


/** @param {?proto.caffe.ContrastiveLossParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setContrastiveLossParam = function(value) {
  jspb.Message.setWrapperField(this, 105, value);
};


proto.caffe.LayerParameter.prototype.clearContrastiveLossParam = function() {
  this.setContrastiveLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasContrastiveLossParam = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional ConvolutionParameter convolution_param = 106;
 * @return {?proto.caffe.ConvolutionParameter}
 */
proto.caffe.LayerParameter.prototype.getConvolutionParam = function() {
  return /** @type{?proto.caffe.ConvolutionParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ConvolutionParameter, 106));
};


/** @param {?proto.caffe.ConvolutionParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setConvolutionParam = function(value) {
  jspb.Message.setWrapperField(this, 106, value);
};


proto.caffe.LayerParameter.prototype.clearConvolutionParam = function() {
  this.setConvolutionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasConvolutionParam = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional CropParameter crop_param = 144;
 * @return {?proto.caffe.CropParameter}
 */
proto.caffe.LayerParameter.prototype.getCropParam = function() {
  return /** @type{?proto.caffe.CropParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.CropParameter, 144));
};


/** @param {?proto.caffe.CropParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setCropParam = function(value) {
  jspb.Message.setWrapperField(this, 144, value);
};


proto.caffe.LayerParameter.prototype.clearCropParam = function() {
  this.setCropParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasCropParam = function() {
  return jspb.Message.getField(this, 144) != null;
};


/**
 * optional DataParameter data_param = 107;
 * @return {?proto.caffe.DataParameter}
 */
proto.caffe.LayerParameter.prototype.getDataParam = function() {
  return /** @type{?proto.caffe.DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DataParameter, 107));
};


/** @param {?proto.caffe.DataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setDataParam = function(value) {
  jspb.Message.setWrapperField(this, 107, value);
};


proto.caffe.LayerParameter.prototype.clearDataParam = function() {
  this.setDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasDataParam = function() {
  return jspb.Message.getField(this, 107) != null;
};


/**
 * optional DropoutParameter dropout_param = 108;
 * @return {?proto.caffe.DropoutParameter}
 */
proto.caffe.LayerParameter.prototype.getDropoutParam = function() {
  return /** @type{?proto.caffe.DropoutParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DropoutParameter, 108));
};


/** @param {?proto.caffe.DropoutParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setDropoutParam = function(value) {
  jspb.Message.setWrapperField(this, 108, value);
};


proto.caffe.LayerParameter.prototype.clearDropoutParam = function() {
  this.setDropoutParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasDropoutParam = function() {
  return jspb.Message.getField(this, 108) != null;
};


/**
 * optional DummyDataParameter dummy_data_param = 109;
 * @return {?proto.caffe.DummyDataParameter}
 */
proto.caffe.LayerParameter.prototype.getDummyDataParam = function() {
  return /** @type{?proto.caffe.DummyDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DummyDataParameter, 109));
};


/** @param {?proto.caffe.DummyDataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setDummyDataParam = function(value) {
  jspb.Message.setWrapperField(this, 109, value);
};


proto.caffe.LayerParameter.prototype.clearDummyDataParam = function() {
  this.setDummyDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasDummyDataParam = function() {
  return jspb.Message.getField(this, 109) != null;
};


/**
 * optional EltwiseParameter eltwise_param = 110;
 * @return {?proto.caffe.EltwiseParameter}
 */
proto.caffe.LayerParameter.prototype.getEltwiseParam = function() {
  return /** @type{?proto.caffe.EltwiseParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.EltwiseParameter, 110));
};


/** @param {?proto.caffe.EltwiseParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setEltwiseParam = function(value) {
  jspb.Message.setWrapperField(this, 110, value);
};


proto.caffe.LayerParameter.prototype.clearEltwiseParam = function() {
  this.setEltwiseParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasEltwiseParam = function() {
  return jspb.Message.getField(this, 110) != null;
};


/**
 * optional ELUParameter elu_param = 140;
 * @return {?proto.caffe.ELUParameter}
 */
proto.caffe.LayerParameter.prototype.getEluParam = function() {
  return /** @type{?proto.caffe.ELUParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ELUParameter, 140));
};


/** @param {?proto.caffe.ELUParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setEluParam = function(value) {
  jspb.Message.setWrapperField(this, 140, value);
};


proto.caffe.LayerParameter.prototype.clearEluParam = function() {
  this.setEluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasEluParam = function() {
  return jspb.Message.getField(this, 140) != null;
};


/**
 * optional EmbedParameter embed_param = 137;
 * @return {?proto.caffe.EmbedParameter}
 */
proto.caffe.LayerParameter.prototype.getEmbedParam = function() {
  return /** @type{?proto.caffe.EmbedParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.EmbedParameter, 137));
};


/** @param {?proto.caffe.EmbedParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setEmbedParam = function(value) {
  jspb.Message.setWrapperField(this, 137, value);
};


proto.caffe.LayerParameter.prototype.clearEmbedParam = function() {
  this.setEmbedParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasEmbedParam = function() {
  return jspb.Message.getField(this, 137) != null;
};


/**
 * optional ExpParameter exp_param = 111;
 * @return {?proto.caffe.ExpParameter}
 */
proto.caffe.LayerParameter.prototype.getExpParam = function() {
  return /** @type{?proto.caffe.ExpParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ExpParameter, 111));
};


/** @param {?proto.caffe.ExpParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setExpParam = function(value) {
  jspb.Message.setWrapperField(this, 111, value);
};


proto.caffe.LayerParameter.prototype.clearExpParam = function() {
  this.setExpParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasExpParam = function() {
  return jspb.Message.getField(this, 111) != null;
};


/**
 * optional FlattenParameter flatten_param = 135;
 * @return {?proto.caffe.FlattenParameter}
 */
proto.caffe.LayerParameter.prototype.getFlattenParam = function() {
  return /** @type{?proto.caffe.FlattenParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FlattenParameter, 135));
};


/** @param {?proto.caffe.FlattenParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setFlattenParam = function(value) {
  jspb.Message.setWrapperField(this, 135, value);
};


proto.caffe.LayerParameter.prototype.clearFlattenParam = function() {
  this.setFlattenParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasFlattenParam = function() {
  return jspb.Message.getField(this, 135) != null;
};


/**
 * optional HDF5DataParameter hdf5_data_param = 112;
 * @return {?proto.caffe.HDF5DataParameter}
 */
proto.caffe.LayerParameter.prototype.getHdf5DataParam = function() {
  return /** @type{?proto.caffe.HDF5DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HDF5DataParameter, 112));
};


/** @param {?proto.caffe.HDF5DataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setHdf5DataParam = function(value) {
  jspb.Message.setWrapperField(this, 112, value);
};


proto.caffe.LayerParameter.prototype.clearHdf5DataParam = function() {
  this.setHdf5DataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasHdf5DataParam = function() {
  return jspb.Message.getField(this, 112) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 113;
 * @return {?proto.caffe.HDF5OutputParameter}
 */
proto.caffe.LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.caffe.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HDF5OutputParameter, 113));
};


/** @param {?proto.caffe.HDF5OutputParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setHdf5OutputParam = function(value) {
  jspb.Message.setWrapperField(this, 113, value);
};


proto.caffe.LayerParameter.prototype.clearHdf5OutputParam = function() {
  this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 113) != null;
};


/**
 * optional HingeLossParameter hinge_loss_param = 114;
 * @return {?proto.caffe.HingeLossParameter}
 */
proto.caffe.LayerParameter.prototype.getHingeLossParam = function() {
  return /** @type{?proto.caffe.HingeLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HingeLossParameter, 114));
};


/** @param {?proto.caffe.HingeLossParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setHingeLossParam = function(value) {
  jspb.Message.setWrapperField(this, 114, value);
};


proto.caffe.LayerParameter.prototype.clearHingeLossParam = function() {
  this.setHingeLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasHingeLossParam = function() {
  return jspb.Message.getField(this, 114) != null;
};


/**
 * optional ImageDataParameter image_data_param = 115;
 * @return {?proto.caffe.ImageDataParameter}
 */
proto.caffe.LayerParameter.prototype.getImageDataParam = function() {
  return /** @type{?proto.caffe.ImageDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ImageDataParameter, 115));
};


/** @param {?proto.caffe.ImageDataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setImageDataParam = function(value) {
  jspb.Message.setWrapperField(this, 115, value);
};


proto.caffe.LayerParameter.prototype.clearImageDataParam = function() {
  this.setImageDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasImageDataParam = function() {
  return jspb.Message.getField(this, 115) != null;
};


/**
 * optional InfogainLossParameter infogain_loss_param = 116;
 * @return {?proto.caffe.InfogainLossParameter}
 */
proto.caffe.LayerParameter.prototype.getInfogainLossParam = function() {
  return /** @type{?proto.caffe.InfogainLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.InfogainLossParameter, 116));
};


/** @param {?proto.caffe.InfogainLossParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setInfogainLossParam = function(value) {
  jspb.Message.setWrapperField(this, 116, value);
};


proto.caffe.LayerParameter.prototype.clearInfogainLossParam = function() {
  this.setInfogainLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasInfogainLossParam = function() {
  return jspb.Message.getField(this, 116) != null;
};


/**
 * optional InnerProductParameter inner_product_param = 117;
 * @return {?proto.caffe.InnerProductParameter}
 */
proto.caffe.LayerParameter.prototype.getInnerProductParam = function() {
  return /** @type{?proto.caffe.InnerProductParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.InnerProductParameter, 117));
};


/** @param {?proto.caffe.InnerProductParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setInnerProductParam = function(value) {
  jspb.Message.setWrapperField(this, 117, value);
};


proto.caffe.LayerParameter.prototype.clearInnerProductParam = function() {
  this.setInnerProductParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasInnerProductParam = function() {
  return jspb.Message.getField(this, 117) != null;
};


/**
 * optional InputParameter input_param = 143;
 * @return {?proto.caffe.InputParameter}
 */
proto.caffe.LayerParameter.prototype.getInputParam = function() {
  return /** @type{?proto.caffe.InputParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.InputParameter, 143));
};


/** @param {?proto.caffe.InputParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setInputParam = function(value) {
  jspb.Message.setWrapperField(this, 143, value);
};


proto.caffe.LayerParameter.prototype.clearInputParam = function() {
  this.setInputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasInputParam = function() {
  return jspb.Message.getField(this, 143) != null;
};


/**
 * optional LogParameter log_param = 134;
 * @return {?proto.caffe.LogParameter}
 */
proto.caffe.LayerParameter.prototype.getLogParam = function() {
  return /** @type{?proto.caffe.LogParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.LogParameter, 134));
};


/** @param {?proto.caffe.LogParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setLogParam = function(value) {
  jspb.Message.setWrapperField(this, 134, value);
};


proto.caffe.LayerParameter.prototype.clearLogParam = function() {
  this.setLogParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasLogParam = function() {
  return jspb.Message.getField(this, 134) != null;
};


/**
 * optional LRNParameter lrn_param = 118;
 * @return {?proto.caffe.LRNParameter}
 */
proto.caffe.LayerParameter.prototype.getLrnParam = function() {
  return /** @type{?proto.caffe.LRNParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.LRNParameter, 118));
};


/** @param {?proto.caffe.LRNParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setLrnParam = function(value) {
  jspb.Message.setWrapperField(this, 118, value);
};


proto.caffe.LayerParameter.prototype.clearLrnParam = function() {
  this.setLrnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasLrnParam = function() {
  return jspb.Message.getField(this, 118) != null;
};


/**
 * optional MemoryDataParameter memory_data_param = 119;
 * @return {?proto.caffe.MemoryDataParameter}
 */
proto.caffe.LayerParameter.prototype.getMemoryDataParam = function() {
  return /** @type{?proto.caffe.MemoryDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.MemoryDataParameter, 119));
};


/** @param {?proto.caffe.MemoryDataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setMemoryDataParam = function(value) {
  jspb.Message.setWrapperField(this, 119, value);
};


proto.caffe.LayerParameter.prototype.clearMemoryDataParam = function() {
  this.setMemoryDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasMemoryDataParam = function() {
  return jspb.Message.getField(this, 119) != null;
};


/**
 * optional MVNParameter mvn_param = 120;
 * @return {?proto.caffe.MVNParameter}
 */
proto.caffe.LayerParameter.prototype.getMvnParam = function() {
  return /** @type{?proto.caffe.MVNParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.MVNParameter, 120));
};


/** @param {?proto.caffe.MVNParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setMvnParam = function(value) {
  jspb.Message.setWrapperField(this, 120, value);
};


proto.caffe.LayerParameter.prototype.clearMvnParam = function() {
  this.setMvnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasMvnParam = function() {
  return jspb.Message.getField(this, 120) != null;
};


/**
 * optional ParameterParameter parameter_param = 145;
 * @return {?proto.caffe.ParameterParameter}
 */
proto.caffe.LayerParameter.prototype.getParameterParam = function() {
  return /** @type{?proto.caffe.ParameterParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ParameterParameter, 145));
};


/** @param {?proto.caffe.ParameterParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setParameterParam = function(value) {
  jspb.Message.setWrapperField(this, 145, value);
};


proto.caffe.LayerParameter.prototype.clearParameterParam = function() {
  this.setParameterParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasParameterParam = function() {
  return jspb.Message.getField(this, 145) != null;
};


/**
 * optional PoolingParameter pooling_param = 121;
 * @return {?proto.caffe.PoolingParameter}
 */
proto.caffe.LayerParameter.prototype.getPoolingParam = function() {
  return /** @type{?proto.caffe.PoolingParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PoolingParameter, 121));
};


/** @param {?proto.caffe.PoolingParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setPoolingParam = function(value) {
  jspb.Message.setWrapperField(this, 121, value);
};


proto.caffe.LayerParameter.prototype.clearPoolingParam = function() {
  this.setPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasPoolingParam = function() {
  return jspb.Message.getField(this, 121) != null;
};


/**
 * optional PowerParameter power_param = 122;
 * @return {?proto.caffe.PowerParameter}
 */
proto.caffe.LayerParameter.prototype.getPowerParam = function() {
  return /** @type{?proto.caffe.PowerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PowerParameter, 122));
};


/** @param {?proto.caffe.PowerParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setPowerParam = function(value) {
  jspb.Message.setWrapperField(this, 122, value);
};


proto.caffe.LayerParameter.prototype.clearPowerParam = function() {
  this.setPowerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasPowerParam = function() {
  return jspb.Message.getField(this, 122) != null;
};


/**
 * optional PReLUParameter prelu_param = 131;
 * @return {?proto.caffe.PReLUParameter}
 */
proto.caffe.LayerParameter.prototype.getPreluParam = function() {
  return /** @type{?proto.caffe.PReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PReLUParameter, 131));
};


/** @param {?proto.caffe.PReLUParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setPreluParam = function(value) {
  jspb.Message.setWrapperField(this, 131, value);
};


proto.caffe.LayerParameter.prototype.clearPreluParam = function() {
  this.setPreluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasPreluParam = function() {
  return jspb.Message.getField(this, 131) != null;
};


/**
 * optional PythonParameter python_param = 130;
 * @return {?proto.caffe.PythonParameter}
 */
proto.caffe.LayerParameter.prototype.getPythonParam = function() {
  return /** @type{?proto.caffe.PythonParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PythonParameter, 130));
};


/** @param {?proto.caffe.PythonParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setPythonParam = function(value) {
  jspb.Message.setWrapperField(this, 130, value);
};


proto.caffe.LayerParameter.prototype.clearPythonParam = function() {
  this.setPythonParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasPythonParam = function() {
  return jspb.Message.getField(this, 130) != null;
};


/**
 * optional RecurrentParameter recurrent_param = 146;
 * @return {?proto.caffe.RecurrentParameter}
 */
proto.caffe.LayerParameter.prototype.getRecurrentParam = function() {
  return /** @type{?proto.caffe.RecurrentParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.RecurrentParameter, 146));
};


/** @param {?proto.caffe.RecurrentParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setRecurrentParam = function(value) {
  jspb.Message.setWrapperField(this, 146, value);
};


proto.caffe.LayerParameter.prototype.clearRecurrentParam = function() {
  this.setRecurrentParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasRecurrentParam = function() {
  return jspb.Message.getField(this, 146) != null;
};


/**
 * optional ReductionParameter reduction_param = 136;
 * @return {?proto.caffe.ReductionParameter}
 */
proto.caffe.LayerParameter.prototype.getReductionParam = function() {
  return /** @type{?proto.caffe.ReductionParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ReductionParameter, 136));
};


/** @param {?proto.caffe.ReductionParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setReductionParam = function(value) {
  jspb.Message.setWrapperField(this, 136, value);
};


proto.caffe.LayerParameter.prototype.clearReductionParam = function() {
  this.setReductionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasReductionParam = function() {
  return jspb.Message.getField(this, 136) != null;
};


/**
 * optional ReLUParameter relu_param = 123;
 * @return {?proto.caffe.ReLUParameter}
 */
proto.caffe.LayerParameter.prototype.getReluParam = function() {
  return /** @type{?proto.caffe.ReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ReLUParameter, 123));
};


/** @param {?proto.caffe.ReLUParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setReluParam = function(value) {
  jspb.Message.setWrapperField(this, 123, value);
};


proto.caffe.LayerParameter.prototype.clearReluParam = function() {
  this.setReluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasReluParam = function() {
  return jspb.Message.getField(this, 123) != null;
};


/**
 * optional ReshapeParameter reshape_param = 133;
 * @return {?proto.caffe.ReshapeParameter}
 */
proto.caffe.LayerParameter.prototype.getReshapeParam = function() {
  return /** @type{?proto.caffe.ReshapeParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ReshapeParameter, 133));
};


/** @param {?proto.caffe.ReshapeParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setReshapeParam = function(value) {
  jspb.Message.setWrapperField(this, 133, value);
};


proto.caffe.LayerParameter.prototype.clearReshapeParam = function() {
  this.setReshapeParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasReshapeParam = function() {
  return jspb.Message.getField(this, 133) != null;
};


/**
 * optional ScaleParameter scale_param = 142;
 * @return {?proto.caffe.ScaleParameter}
 */
proto.caffe.LayerParameter.prototype.getScaleParam = function() {
  return /** @type{?proto.caffe.ScaleParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ScaleParameter, 142));
};


/** @param {?proto.caffe.ScaleParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setScaleParam = function(value) {
  jspb.Message.setWrapperField(this, 142, value);
};


proto.caffe.LayerParameter.prototype.clearScaleParam = function() {
  this.setScaleParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasScaleParam = function() {
  return jspb.Message.getField(this, 142) != null;
};


/**
 * optional SigmoidParameter sigmoid_param = 124;
 * @return {?proto.caffe.SigmoidParameter}
 */
proto.caffe.LayerParameter.prototype.getSigmoidParam = function() {
  return /** @type{?proto.caffe.SigmoidParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SigmoidParameter, 124));
};


/** @param {?proto.caffe.SigmoidParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setSigmoidParam = function(value) {
  jspb.Message.setWrapperField(this, 124, value);
};


proto.caffe.LayerParameter.prototype.clearSigmoidParam = function() {
  this.setSigmoidParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasSigmoidParam = function() {
  return jspb.Message.getField(this, 124) != null;
};


/**
 * optional SoftmaxParameter softmax_param = 125;
 * @return {?proto.caffe.SoftmaxParameter}
 */
proto.caffe.LayerParameter.prototype.getSoftmaxParam = function() {
  return /** @type{?proto.caffe.SoftmaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SoftmaxParameter, 125));
};


/** @param {?proto.caffe.SoftmaxParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setSoftmaxParam = function(value) {
  jspb.Message.setWrapperField(this, 125, value);
};


proto.caffe.LayerParameter.prototype.clearSoftmaxParam = function() {
  this.setSoftmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasSoftmaxParam = function() {
  return jspb.Message.getField(this, 125) != null;
};


/**
 * optional SPPParameter spp_param = 132;
 * @return {?proto.caffe.SPPParameter}
 */
proto.caffe.LayerParameter.prototype.getSppParam = function() {
  return /** @type{?proto.caffe.SPPParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SPPParameter, 132));
};


/** @param {?proto.caffe.SPPParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setSppParam = function(value) {
  jspb.Message.setWrapperField(this, 132, value);
};


proto.caffe.LayerParameter.prototype.clearSppParam = function() {
  this.setSppParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasSppParam = function() {
  return jspb.Message.getField(this, 132) != null;
};


/**
 * optional SliceParameter slice_param = 126;
 * @return {?proto.caffe.SliceParameter}
 */
proto.caffe.LayerParameter.prototype.getSliceParam = function() {
  return /** @type{?proto.caffe.SliceParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SliceParameter, 126));
};


/** @param {?proto.caffe.SliceParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setSliceParam = function(value) {
  jspb.Message.setWrapperField(this, 126, value);
};


proto.caffe.LayerParameter.prototype.clearSliceParam = function() {
  this.setSliceParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasSliceParam = function() {
  return jspb.Message.getField(this, 126) != null;
};


/**
 * optional TanHParameter tanh_param = 127;
 * @return {?proto.caffe.TanHParameter}
 */
proto.caffe.LayerParameter.prototype.getTanhParam = function() {
  return /** @type{?proto.caffe.TanHParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.TanHParameter, 127));
};


/** @param {?proto.caffe.TanHParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setTanhParam = function(value) {
  jspb.Message.setWrapperField(this, 127, value);
};


proto.caffe.LayerParameter.prototype.clearTanhParam = function() {
  this.setTanhParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasTanhParam = function() {
  return jspb.Message.getField(this, 127) != null;
};


/**
 * optional ThresholdParameter threshold_param = 128;
 * @return {?proto.caffe.ThresholdParameter}
 */
proto.caffe.LayerParameter.prototype.getThresholdParam = function() {
  return /** @type{?proto.caffe.ThresholdParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ThresholdParameter, 128));
};


/** @param {?proto.caffe.ThresholdParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setThresholdParam = function(value) {
  jspb.Message.setWrapperField(this, 128, value);
};


proto.caffe.LayerParameter.prototype.clearThresholdParam = function() {
  this.setThresholdParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasThresholdParam = function() {
  return jspb.Message.getField(this, 128) != null;
};


/**
 * optional TileParameter tile_param = 138;
 * @return {?proto.caffe.TileParameter}
 */
proto.caffe.LayerParameter.prototype.getTileParam = function() {
  return /** @type{?proto.caffe.TileParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.TileParameter, 138));
};


/** @param {?proto.caffe.TileParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setTileParam = function(value) {
  jspb.Message.setWrapperField(this, 138, value);
};


proto.caffe.LayerParameter.prototype.clearTileParam = function() {
  this.setTileParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasTileParam = function() {
  return jspb.Message.getField(this, 138) != null;
};


/**
 * optional WindowDataParameter window_data_param = 129;
 * @return {?proto.caffe.WindowDataParameter}
 */
proto.caffe.LayerParameter.prototype.getWindowDataParam = function() {
  return /** @type{?proto.caffe.WindowDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.WindowDataParameter, 129));
};


/** @param {?proto.caffe.WindowDataParameter|undefined} value */
proto.caffe.LayerParameter.prototype.setWindowDataParam = function(value) {
  jspb.Message.setWrapperField(this, 129, value);
};


proto.caffe.LayerParameter.prototype.clearWindowDataParam = function() {
  this.setWindowDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LayerParameter.prototype.hasWindowDataParam = function() {
  return jspb.Message.getField(this, 129) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.TransformationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.TransformationParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.TransformationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.TransformationParameter.displayName = 'proto.caffe.TransformationParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.TransformationParameter.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.TransformationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.TransformationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.TransformationParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.TransformationParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: +jspb.Message.getFieldWithDefault(msg, 1, 1.0),
    mirror: jspb.Message.getFieldWithDefault(msg, 2, false),
    cropSize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    meanFile: jspb.Message.getField(msg, 4),
    meanValueList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    forceColor: jspb.Message.getFieldWithDefault(msg, 6, false),
    forceGray: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.TransformationParameter}
 */
proto.caffe.TransformationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.TransformationParameter;
  return proto.caffe.TransformationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.TransformationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.TransformationParameter}
 */
proto.caffe.TransformationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addMeanValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceColor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceGray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.TransformationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.TransformationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.TransformationParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.TransformationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMeanValueList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional float scale = 1;
 * @return {number}
 */
proto.caffe.TransformationParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 1.0));
};


/** @param {number} value */
proto.caffe.TransformationParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.TransformationParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool mirror = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.TransformationParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.caffe.TransformationParameter.prototype.setMirror = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.TransformationParameter.prototype.clearMirror = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 crop_size = 3;
 * @return {number}
 */
proto.caffe.TransformationParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.TransformationParameter.prototype.setCropSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.TransformationParameter.prototype.clearCropSize = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string mean_file = 4;
 * @return {string}
 */
proto.caffe.TransformationParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.caffe.TransformationParameter.prototype.setMeanFile = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.TransformationParameter.prototype.clearMeanFile = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated float mean_value = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.TransformationParameter.prototype.getMeanValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.caffe.TransformationParameter.prototype.setMeanValueList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.TransformationParameter.prototype.addMeanValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.caffe.TransformationParameter.prototype.clearMeanValueList = function() {
  this.setMeanValueList([]);
};


/**
 * optional bool force_color = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.TransformationParameter.prototype.getForceColor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.caffe.TransformationParameter.prototype.setForceColor = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.TransformationParameter.prototype.clearForceColor = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasForceColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool force_gray = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.TransformationParameter.prototype.getForceGray = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.caffe.TransformationParameter.prototype.setForceGray = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.TransformationParameter.prototype.clearForceGray = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TransformationParameter.prototype.hasForceGray = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.LossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.LossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.LossParameter.displayName = 'proto.caffe.LossParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.LossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.LossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.LossParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.LossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    ignoreLabel: jspb.Message.getField(msg, 1),
    normalization: jspb.Message.getFieldWithDefault(msg, 3, 1),
    normalize: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.LossParameter}
 */
proto.caffe.LossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.LossParameter;
  return proto.caffe.LossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.LossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.LossParameter}
 */
proto.caffe.LossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIgnoreLabel(value);
      break;
    case 3:
      var value = /** @type {!proto.caffe.LossParameter.NormalizationMode} */ (reader.readEnum());
      msg.setNormalization(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.LossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.LossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.LossParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.LossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {!proto.caffe.LossParameter.NormalizationMode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.LossParameter.NormalizationMode = {
  FULL: 0,
  VALID: 1,
  BATCH_SIZE: 2,
  NONE: 3
};

/**
 * optional int32 ignore_label = 1;
 * @return {number}
 */
proto.caffe.LossParameter.prototype.getIgnoreLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.LossParameter.prototype.setIgnoreLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.LossParameter.prototype.clearIgnoreLabel = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LossParameter.prototype.hasIgnoreLabel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NormalizationMode normalization = 3;
 * @return {!proto.caffe.LossParameter.NormalizationMode}
 */
proto.caffe.LossParameter.prototype.getNormalization = function() {
  return /** @type {!proto.caffe.LossParameter.NormalizationMode} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.caffe.LossParameter.NormalizationMode} value */
proto.caffe.LossParameter.prototype.setNormalization = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.LossParameter.prototype.clearNormalization = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LossParameter.prototype.hasNormalization = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool normalize = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.LossParameter.prototype.getNormalize = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.caffe.LossParameter.prototype.setNormalize = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.LossParameter.prototype.clearNormalize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LossParameter.prototype.hasNormalize = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.AccuracyParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.AccuracyParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.AccuracyParameter.displayName = 'proto.caffe.AccuracyParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.AccuracyParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.AccuracyParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.AccuracyParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.AccuracyParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    topK: jspb.Message.getFieldWithDefault(msg, 1, 1),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1),
    ignoreLabel: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.AccuracyParameter}
 */
proto.caffe.AccuracyParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.AccuracyParameter;
  return proto.caffe.AccuracyParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.AccuracyParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.AccuracyParameter}
 */
proto.caffe.AccuracyParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopK(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIgnoreLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.AccuracyParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.AccuracyParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.AccuracyParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.AccuracyParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 top_k = 1;
 * @return {number}
 */
proto.caffe.AccuracyParameter.prototype.getTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.AccuracyParameter.prototype.setTopK = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.AccuracyParameter.prototype.clearTopK = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.AccuracyParameter.prototype.hasTopK = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.caffe.AccuracyParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.AccuracyParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.AccuracyParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.AccuracyParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 ignore_label = 3;
 * @return {number}
 */
proto.caffe.AccuracyParameter.prototype.getIgnoreLabel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.AccuracyParameter.prototype.setIgnoreLabel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.AccuracyParameter.prototype.clearIgnoreLabel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.AccuracyParameter.prototype.hasIgnoreLabel = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ArgMaxParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ArgMaxParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ArgMaxParameter.displayName = 'proto.caffe.ArgMaxParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ArgMaxParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ArgMaxParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ArgMaxParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ArgMaxParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    outMaxVal: jspb.Message.getFieldWithDefault(msg, 1, false),
    topK: jspb.Message.getFieldWithDefault(msg, 2, 1),
    axis: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ArgMaxParameter}
 */
proto.caffe.ArgMaxParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ArgMaxParameter;
  return proto.caffe.ArgMaxParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ArgMaxParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ArgMaxParameter}
 */
proto.caffe.ArgMaxParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOutMaxVal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTopK(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ArgMaxParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ArgMaxParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ArgMaxParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ArgMaxParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool out_max_val = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ArgMaxParameter.prototype.getOutMaxVal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.caffe.ArgMaxParameter.prototype.setOutMaxVal = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ArgMaxParameter.prototype.clearOutMaxVal = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ArgMaxParameter.prototype.hasOutMaxVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 top_k = 2;
 * @return {number}
 */
proto.caffe.ArgMaxParameter.prototype.getTopK = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.ArgMaxParameter.prototype.setTopK = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ArgMaxParameter.prototype.clearTopK = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ArgMaxParameter.prototype.hasTopK = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 axis = 3;
 * @return {number}
 */
proto.caffe.ArgMaxParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.ArgMaxParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ArgMaxParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ArgMaxParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ConcatParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ConcatParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ConcatParameter.displayName = 'proto.caffe.ConcatParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ConcatParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ConcatParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ConcatParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ConcatParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1),
    concatDim: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ConcatParameter}
 */
proto.caffe.ConcatParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ConcatParameter;
  return proto.caffe.ConcatParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ConcatParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ConcatParameter}
 */
proto.caffe.ConcatParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConcatDim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ConcatParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ConcatParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ConcatParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ConcatParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.caffe.ConcatParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.ConcatParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ConcatParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConcatParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 concat_dim = 1;
 * @return {number}
 */
proto.caffe.ConcatParameter.prototype.getConcatDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.ConcatParameter.prototype.setConcatDim = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ConcatParameter.prototype.clearConcatDim = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConcatParameter.prototype.hasConcatDim = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.BatchNormParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.BatchNormParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.BatchNormParameter.displayName = 'proto.caffe.BatchNormParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.BatchNormParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.BatchNormParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.BatchNormParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.BatchNormParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    useGlobalStats: jspb.Message.getField(msg, 1),
    movingAverageFraction: +jspb.Message.getFieldWithDefault(msg, 2, 0.999),
    eps: +jspb.Message.getFieldWithDefault(msg, 3, 1.0E-5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.BatchNormParameter}
 */
proto.caffe.BatchNormParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.BatchNormParameter;
  return proto.caffe.BatchNormParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.BatchNormParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.BatchNormParameter}
 */
proto.caffe.BatchNormParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseGlobalStats(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMovingAverageFraction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.BatchNormParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.BatchNormParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.BatchNormParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.BatchNormParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool use_global_stats = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.BatchNormParameter.prototype.getUseGlobalStats = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.caffe.BatchNormParameter.prototype.setUseGlobalStats = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.BatchNormParameter.prototype.clearUseGlobalStats = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BatchNormParameter.prototype.hasUseGlobalStats = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float moving_average_fraction = 2;
 * @return {number}
 */
proto.caffe.BatchNormParameter.prototype.getMovingAverageFraction = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.999));
};


/** @param {number} value */
proto.caffe.BatchNormParameter.prototype.setMovingAverageFraction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.BatchNormParameter.prototype.clearMovingAverageFraction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BatchNormParameter.prototype.hasMovingAverageFraction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float eps = 3;
 * @return {number}
 */
proto.caffe.BatchNormParameter.prototype.getEps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 1.0E-5));
};


/** @param {number} value */
proto.caffe.BatchNormParameter.prototype.setEps = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.BatchNormParameter.prototype.clearEps = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BatchNormParameter.prototype.hasEps = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.BiasParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.BiasParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.BiasParameter.displayName = 'proto.caffe.BiasParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.BiasParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.BiasParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.BiasParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.BiasParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    numAxes: jspb.Message.getFieldWithDefault(msg, 2, 1),
    filler: (f = msg.getFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.BiasParameter}
 */
proto.caffe.BiasParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.BiasParameter;
  return proto.caffe.BiasParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.BiasParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.BiasParameter}
 */
proto.caffe.BiasParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    case 3:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.BiasParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.BiasParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.BiasParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.BiasParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.caffe.BiasParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.BiasParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.BiasParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BiasParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_axes = 2;
 * @return {number}
 */
proto.caffe.BiasParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.BiasParameter.prototype.setNumAxes = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.BiasParameter.prototype.clearNumAxes = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BiasParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter filler = 3;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.BiasParameter.prototype.getFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 3));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.BiasParameter.prototype.setFiller = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.caffe.BiasParameter.prototype.clearFiller = function() {
  this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.BiasParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ContrastiveLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ContrastiveLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ContrastiveLossParameter.displayName = 'proto.caffe.ContrastiveLossParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ContrastiveLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ContrastiveLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ContrastiveLossParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ContrastiveLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    margin: +jspb.Message.getFieldWithDefault(msg, 1, 1.0),
    legacyVersion: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ContrastiveLossParameter}
 */
proto.caffe.ContrastiveLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ContrastiveLossParameter;
  return proto.caffe.ContrastiveLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ContrastiveLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ContrastiveLossParameter}
 */
proto.caffe.ContrastiveLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMargin(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLegacyVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ContrastiveLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ContrastiveLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ContrastiveLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ContrastiveLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional float margin = 1;
 * @return {number}
 */
proto.caffe.ContrastiveLossParameter.prototype.getMargin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 1.0));
};


/** @param {number} value */
proto.caffe.ContrastiveLossParameter.prototype.setMargin = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ContrastiveLossParameter.prototype.clearMargin = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ContrastiveLossParameter.prototype.hasMargin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool legacy_version = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ContrastiveLossParameter.prototype.getLegacyVersion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.caffe.ContrastiveLossParameter.prototype.setLegacyVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ContrastiveLossParameter.prototype.clearLegacyVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ContrastiveLossParameter.prototype.hasLegacyVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ConvolutionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.ConvolutionParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.ConvolutionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ConvolutionParameter.displayName = 'proto.caffe.ConvolutionParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.ConvolutionParameter.repeatedFields_ = [3,4,6,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ConvolutionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ConvolutionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ConvolutionParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ConvolutionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: jspb.Message.getField(msg, 1),
    biasTerm: jspb.Message.getFieldWithDefault(msg, 2, true),
    padList: jspb.Message.getField(msg, 3),
    kernelSizeList: jspb.Message.getField(msg, 4),
    strideList: jspb.Message.getField(msg, 6),
    dilationList: jspb.Message.getField(msg, 18),
    padH: jspb.Message.getFieldWithDefault(msg, 9, 0),
    padW: jspb.Message.getFieldWithDefault(msg, 10, 0),
    kernelH: jspb.Message.getField(msg, 11),
    kernelW: jspb.Message.getField(msg, 12),
    strideH: jspb.Message.getField(msg, 13),
    strideW: jspb.Message.getField(msg, 14),
    group: jspb.Message.getFieldWithDefault(msg, 5, 1),
    weightFiller: (f = msg.getWeightFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    engine: jspb.Message.getFieldWithDefault(msg, 15, 0),
    axis: jspb.Message.getFieldWithDefault(msg, 16, 1),
    forceNdIm2col: jspb.Message.getFieldWithDefault(msg, 17, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ConvolutionParameter}
 */
proto.caffe.ConvolutionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ConvolutionParameter;
  return proto.caffe.ConvolutionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ConvolutionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ConvolutionParameter}
 */
proto.caffe.ConvolutionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addPad(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addKernelSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addStride(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addDilation(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadH(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadW(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelH(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelW(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideH(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideW(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 7:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 8:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 15:
      var value = /** @type {!proto.caffe.ConvolutionParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceNdIm2col(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ConvolutionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ConvolutionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ConvolutionParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ConvolutionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPadList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getKernelSizeList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = message.getStrideList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      6,
      f
    );
  }
  f = message.getDilationList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.caffe.ConvolutionParameter.Engine} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.ConvolutionParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setNumOutput = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ConvolutionParameter.prototype.clearNumOutput = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bias_term = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ConvolutionParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, true));
};


/** @param {boolean} value */
proto.caffe.ConvolutionParameter.prototype.setBiasTerm = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ConvolutionParameter.prototype.clearBiasTerm = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint32 pad = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.ConvolutionParameter.prototype.getPadList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.caffe.ConvolutionParameter.prototype.setPadList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.ConvolutionParameter.prototype.addPad = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.ConvolutionParameter.prototype.clearPadList = function() {
  this.setPadList([]);
};


/**
 * repeated uint32 kernel_size = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.ConvolutionParameter.prototype.getKernelSizeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.caffe.ConvolutionParameter.prototype.setKernelSizeList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.ConvolutionParameter.prototype.addKernelSize = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.caffe.ConvolutionParameter.prototype.clearKernelSizeList = function() {
  this.setKernelSizeList([]);
};


/**
 * repeated uint32 stride = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.ConvolutionParameter.prototype.getStrideList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 6));
};


/** @param {!Array.<number>} value */
proto.caffe.ConvolutionParameter.prototype.setStrideList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.ConvolutionParameter.prototype.addStride = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.caffe.ConvolutionParameter.prototype.clearStrideList = function() {
  this.setStrideList([]);
};


/**
 * repeated uint32 dilation = 18;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.ConvolutionParameter.prototype.getDilationList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 18));
};


/** @param {!Array.<number>} value */
proto.caffe.ConvolutionParameter.prototype.setDilationList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.ConvolutionParameter.prototype.addDilation = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.caffe.ConvolutionParameter.prototype.clearDilationList = function() {
  this.setDilationList([]);
};


/**
 * optional uint32 pad_h = 9;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getPadH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setPadH = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.ConvolutionParameter.prototype.clearPadH = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasPadH = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pad_w = 10;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getPadW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setPadW = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.ConvolutionParameter.prototype.clearPadW = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasPadW = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 kernel_h = 11;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getKernelH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setKernelH = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.ConvolutionParameter.prototype.clearKernelH = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasKernelH = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 kernel_w = 12;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getKernelW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setKernelW = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.ConvolutionParameter.prototype.clearKernelW = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasKernelW = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 stride_h = 13;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getStrideH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setStrideH = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.caffe.ConvolutionParameter.prototype.clearStrideH = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasStrideH = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 stride_w = 14;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getStrideW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setStrideW = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.caffe.ConvolutionParameter.prototype.clearStrideW = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasStrideW = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 group = 5;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setGroup = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.ConvolutionParameter.prototype.clearGroup = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FillerParameter weight_filler = 7;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.ConvolutionParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 7));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.ConvolutionParameter.prototype.setWeightFiller = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.caffe.ConvolutionParameter.prototype.clearWeightFiller = function() {
  this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional FillerParameter bias_filler = 8;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.ConvolutionParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 8));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.ConvolutionParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.caffe.ConvolutionParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Engine engine = 15;
 * @return {!proto.caffe.ConvolutionParameter.Engine}
 */
proto.caffe.ConvolutionParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.ConvolutionParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.caffe.ConvolutionParameter.Engine} value */
proto.caffe.ConvolutionParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.caffe.ConvolutionParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 axis = 16;
 * @return {number}
 */
proto.caffe.ConvolutionParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 1));
};


/** @param {number} value */
proto.caffe.ConvolutionParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.caffe.ConvolutionParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool force_nd_im2col = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ConvolutionParameter.prototype.getForceNdIm2col = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.caffe.ConvolutionParameter.prototype.setForceNdIm2col = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.caffe.ConvolutionParameter.prototype.clearForceNdIm2col = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ConvolutionParameter.prototype.hasForceNdIm2col = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.CropParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.CropParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.CropParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.CropParameter.displayName = 'proto.caffe.CropParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.CropParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.CropParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.CropParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.CropParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.CropParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 2),
    offsetList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.CropParameter}
 */
proto.caffe.CropParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.CropParameter;
  return proto.caffe.CropParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.CropParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.CropParameter}
 */
proto.caffe.CropParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.CropParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.CropParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.CropParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.CropParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffsetList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.caffe.CropParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 2));
};


/** @param {number} value */
proto.caffe.CropParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.CropParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.CropParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint32 offset = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.CropParameter.prototype.getOffsetList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.caffe.CropParameter.prototype.setOffsetList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.CropParameter.prototype.addOffset = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.CropParameter.prototype.clearOffsetList = function() {
  this.setOffsetList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.DataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.DataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.DataParameter.displayName = 'proto.caffe.DataParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.DataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.DataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.DataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.DataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getField(msg, 1),
    batchSize: jspb.Message.getField(msg, 4),
    randSkip: jspb.Message.getFieldWithDefault(msg, 7, 0),
    backend: jspb.Message.getFieldWithDefault(msg, 8, 0),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    meanFile: jspb.Message.getField(msg, 3),
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getFieldWithDefault(msg, 6, false),
    forceEncodedColor: jspb.Message.getFieldWithDefault(msg, 9, false),
    prefetch: jspb.Message.getFieldWithDefault(msg, 10, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.DataParameter}
 */
proto.caffe.DataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.DataParameter;
  return proto.caffe.DataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.DataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.DataParameter}
 */
proto.caffe.DataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 8:
      var value = /** @type {!proto.caffe.DataParameter.DB} */ (reader.readEnum());
      msg.setBackend(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceEncodedColor(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefetch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.DataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.DataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.DataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.DataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {!proto.caffe.DataParameter.DB} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.DataParameter.DB = {
  LEVELDB: 0,
  LMDB: 1
};

/**
 * optional string source = 1;
 * @return {string}
 */
proto.caffe.DataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.DataParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.DataParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.caffe.DataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.DataParameter.prototype.setBatchSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.DataParameter.prototype.clearBatchSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rand_skip = 7;
 * @return {number}
 */
proto.caffe.DataParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.caffe.DataParameter.prototype.setRandSkip = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.DataParameter.prototype.clearRandSkip = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DB backend = 8;
 * @return {!proto.caffe.DataParameter.DB}
 */
proto.caffe.DataParameter.prototype.getBackend = function() {
  return /** @type {!proto.caffe.DataParameter.DB} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.caffe.DataParameter.DB} value */
proto.caffe.DataParameter.prototype.setBackend = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.DataParameter.prototype.clearBackend = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasBackend = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.DataParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.DataParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.DataParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.caffe.DataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.caffe.DataParameter.prototype.setMeanFile = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.DataParameter.prototype.clearMeanFile = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.caffe.DataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.caffe.DataParameter.prototype.setCropSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.DataParameter.prototype.clearCropSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.DataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.caffe.DataParameter.prototype.setMirror = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.DataParameter.prototype.clearMirror = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool force_encoded_color = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.DataParameter.prototype.getForceEncodedColor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.caffe.DataParameter.prototype.setForceEncodedColor = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.DataParameter.prototype.clearForceEncodedColor = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasForceEncodedColor = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 prefetch = 10;
 * @return {number}
 */
proto.caffe.DataParameter.prototype.getPrefetch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 4));
};


/** @param {number} value */
proto.caffe.DataParameter.prototype.setPrefetch = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.DataParameter.prototype.clearPrefetch = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DataParameter.prototype.hasPrefetch = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.DropoutParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.DropoutParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.DropoutParameter.displayName = 'proto.caffe.DropoutParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.DropoutParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.DropoutParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.DropoutParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.DropoutParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dropoutRatio: +jspb.Message.getFieldWithDefault(msg, 1, 0.5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.DropoutParameter}
 */
proto.caffe.DropoutParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.DropoutParameter;
  return proto.caffe.DropoutParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.DropoutParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.DropoutParameter}
 */
proto.caffe.DropoutParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDropoutRatio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.DropoutParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.DropoutParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.DropoutParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.DropoutParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float dropout_ratio = 1;
 * @return {number}
 */
proto.caffe.DropoutParameter.prototype.getDropoutRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.5));
};


/** @param {number} value */
proto.caffe.DropoutParameter.prototype.setDropoutRatio = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.DropoutParameter.prototype.clearDropoutRatio = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.DropoutParameter.prototype.hasDropoutRatio = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.DummyDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.DummyDataParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.DummyDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.DummyDataParameter.displayName = 'proto.caffe.DummyDataParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.DummyDataParameter.repeatedFields_ = [1,6,2,3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.DummyDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.DummyDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.DummyDataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.DummyDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataFillerList: jspb.Message.toObjectList(msg.getDataFillerList(),
    proto.caffe.FillerParameter.toObject, includeInstance),
    shapeList: jspb.Message.toObjectList(msg.getShapeList(),
    proto.caffe.BlobShape.toObject, includeInstance),
    numList: jspb.Message.getField(msg, 2),
    channelsList: jspb.Message.getField(msg, 3),
    heightList: jspb.Message.getField(msg, 4),
    widthList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.DummyDataParameter}
 */
proto.caffe.DummyDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.DummyDataParameter;
  return proto.caffe.DummyDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.DummyDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.DummyDataParameter}
 */
proto.caffe.DummyDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.addDataFiller(value);
      break;
    case 6:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.addShape(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addChannels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.DummyDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.DummyDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.DummyDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.DummyDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataFillerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
  f = message.getNumList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      3,
      f
    );
  }
  f = message.getHeightList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
  f = message.getWidthList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      5,
      f
    );
  }
};


/**
 * repeated FillerParameter data_filler = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.FillerParameter>}
 */
proto.caffe.DummyDataParameter.prototype.getDataFillerList = function() {
  return /** @type{!Array.<!proto.caffe.FillerParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.FillerParameter, 1));
};


/** @param {!Array.<!proto.caffe.FillerParameter>} value */
proto.caffe.DummyDataParameter.prototype.setDataFillerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.caffe.FillerParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.FillerParameter}
 */
proto.caffe.DummyDataParameter.prototype.addDataFiller = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.caffe.FillerParameter, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearDataFillerList = function() {
  this.setDataFillerList([]);
};


/**
 * repeated BlobShape shape = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobShape>}
 */
proto.caffe.DummyDataParameter.prototype.getShapeList = function() {
  return /** @type{!Array.<!proto.caffe.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobShape, 6));
};


/** @param {!Array.<!proto.caffe.BlobShape>} value */
proto.caffe.DummyDataParameter.prototype.setShapeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.caffe.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobShape}
 */
proto.caffe.DummyDataParameter.prototype.addShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.caffe.BlobShape, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearShapeList = function() {
  this.setShapeList([]);
};


/**
 * repeated uint32 num = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.DummyDataParameter.prototype.getNumList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.caffe.DummyDataParameter.prototype.setNumList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.DummyDataParameter.prototype.addNum = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearNumList = function() {
  this.setNumList([]);
};


/**
 * repeated uint32 channels = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.DummyDataParameter.prototype.getChannelsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.caffe.DummyDataParameter.prototype.setChannelsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.DummyDataParameter.prototype.addChannels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearChannelsList = function() {
  this.setChannelsList([]);
};


/**
 * repeated uint32 height = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.DummyDataParameter.prototype.getHeightList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<number>} value */
proto.caffe.DummyDataParameter.prototype.setHeightList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.DummyDataParameter.prototype.addHeight = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearHeightList = function() {
  this.setHeightList([]);
};


/**
 * repeated uint32 width = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.DummyDataParameter.prototype.getWidthList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.caffe.DummyDataParameter.prototype.setWidthList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.DummyDataParameter.prototype.addWidth = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.caffe.DummyDataParameter.prototype.clearWidthList = function() {
  this.setWidthList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.EltwiseParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.EltwiseParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.EltwiseParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.EltwiseParameter.displayName = 'proto.caffe.EltwiseParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.EltwiseParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.EltwiseParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.EltwiseParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.EltwiseParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.EltwiseParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 1),
    coeffList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    stableProdGrad: jspb.Message.getFieldWithDefault(msg, 3, true)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.EltwiseParameter}
 */
proto.caffe.EltwiseParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.EltwiseParameter;
  return proto.caffe.EltwiseParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.EltwiseParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.EltwiseParameter}
 */
proto.caffe.EltwiseParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.EltwiseParameter.EltwiseOp} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addCoeff(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStableProdGrad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.EltwiseParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.EltwiseParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.EltwiseParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.EltwiseParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.EltwiseParameter.EltwiseOp} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCoeffList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.EltwiseParameter.EltwiseOp = {
  PROD: 0,
  SUM: 1,
  MAX: 2
};

/**
 * optional EltwiseOp operation = 1;
 * @return {!proto.caffe.EltwiseParameter.EltwiseOp}
 */
proto.caffe.EltwiseParameter.prototype.getOperation = function() {
  return /** @type {!proto.caffe.EltwiseParameter.EltwiseOp} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.caffe.EltwiseParameter.EltwiseOp} value */
proto.caffe.EltwiseParameter.prototype.setOperation = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.EltwiseParameter.prototype.clearOperation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EltwiseParameter.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated float coeff = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.EltwiseParameter.prototype.getCoeffList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.caffe.EltwiseParameter.prototype.setCoeffList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.EltwiseParameter.prototype.addCoeff = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.EltwiseParameter.prototype.clearCoeffList = function() {
  this.setCoeffList([]);
};


/**
 * optional bool stable_prod_grad = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.EltwiseParameter.prototype.getStableProdGrad = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, true));
};


/** @param {boolean} value */
proto.caffe.EltwiseParameter.prototype.setStableProdGrad = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.EltwiseParameter.prototype.clearStableProdGrad = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EltwiseParameter.prototype.hasStableProdGrad = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ELUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ELUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ELUParameter.displayName = 'proto.caffe.ELUParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ELUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ELUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ELUParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ELUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    alpha: +jspb.Message.getFieldWithDefault(msg, 1, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ELUParameter}
 */
proto.caffe.ELUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ELUParameter;
  return proto.caffe.ELUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ELUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ELUParameter}
 */
proto.caffe.ELUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ELUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ELUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ELUParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ELUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float alpha = 1;
 * @return {number}
 */
proto.caffe.ELUParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 1.0));
};


/** @param {number} value */
proto.caffe.ELUParameter.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ELUParameter.prototype.clearAlpha = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ELUParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.EmbedParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.EmbedParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.EmbedParameter.displayName = 'proto.caffe.EmbedParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.EmbedParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.EmbedParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.EmbedParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.EmbedParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: jspb.Message.getField(msg, 1),
    inputDim: jspb.Message.getField(msg, 2),
    biasTerm: jspb.Message.getFieldWithDefault(msg, 3, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.EmbedParameter}
 */
proto.caffe.EmbedParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.EmbedParameter;
  return proto.caffe.EmbedParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.EmbedParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.EmbedParameter}
 */
proto.caffe.EmbedParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInputDim(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 4:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 5:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.EmbedParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.EmbedParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.EmbedParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.EmbedParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.caffe.EmbedParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.EmbedParameter.prototype.setNumOutput = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.EmbedParameter.prototype.clearNumOutput = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EmbedParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 input_dim = 2;
 * @return {number}
 */
proto.caffe.EmbedParameter.prototype.getInputDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.EmbedParameter.prototype.setInputDim = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.EmbedParameter.prototype.clearInputDim = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EmbedParameter.prototype.hasInputDim = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bias_term = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.EmbedParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, true));
};


/** @param {boolean} value */
proto.caffe.EmbedParameter.prototype.setBiasTerm = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.EmbedParameter.prototype.clearBiasTerm = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EmbedParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FillerParameter weight_filler = 4;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.EmbedParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 4));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.EmbedParameter.prototype.setWeightFiller = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.caffe.EmbedParameter.prototype.clearWeightFiller = function() {
  this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EmbedParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter bias_filler = 5;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.EmbedParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 5));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.EmbedParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.caffe.EmbedParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.EmbedParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ExpParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ExpParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ExpParameter.displayName = 'proto.caffe.ExpParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ExpParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ExpParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ExpParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ExpParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: +jspb.Message.getFieldWithDefault(msg, 1, -1.0),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    shift: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ExpParameter}
 */
proto.caffe.ExpParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ExpParameter;
  return proto.caffe.ExpParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ExpParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ExpParameter}
 */
proto.caffe.ExpParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ExpParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ExpParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ExpParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ExpParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float base = 1;
 * @return {number}
 */
proto.caffe.ExpParameter.prototype.getBase = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, -1.0));
};


/** @param {number} value */
proto.caffe.ExpParameter.prototype.setBase = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ExpParameter.prototype.clearBase = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ExpParameter.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.ExpParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.ExpParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ExpParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ExpParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.caffe.ExpParameter.prototype.getShift = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.caffe.ExpParameter.prototype.setShift = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ExpParameter.prototype.clearShift = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ExpParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.FlattenParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.FlattenParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.FlattenParameter.displayName = 'proto.caffe.FlattenParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.FlattenParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.FlattenParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.FlattenParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.FlattenParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    endAxis: jspb.Message.getFieldWithDefault(msg, 2, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.FlattenParameter}
 */
proto.caffe.FlattenParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.FlattenParameter;
  return proto.caffe.FlattenParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.FlattenParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.FlattenParameter}
 */
proto.caffe.FlattenParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.FlattenParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.FlattenParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.FlattenParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.FlattenParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.caffe.FlattenParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.FlattenParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.FlattenParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FlattenParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 end_axis = 2;
 * @return {number}
 */
proto.caffe.FlattenParameter.prototype.getEndAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, -1));
};


/** @param {number} value */
proto.caffe.FlattenParameter.prototype.setEndAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.FlattenParameter.prototype.clearEndAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.FlattenParameter.prototype.hasEndAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.HDF5DataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.HDF5DataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.HDF5DataParameter.displayName = 'proto.caffe.HDF5DataParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.HDF5DataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.HDF5DataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.HDF5DataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.HDF5DataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getField(msg, 1),
    batchSize: jspb.Message.getField(msg, 2),
    shuffle: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.HDF5DataParameter}
 */
proto.caffe.HDF5DataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.HDF5DataParameter;
  return proto.caffe.HDF5DataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.HDF5DataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.HDF5DataParameter}
 */
proto.caffe.HDF5DataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.HDF5DataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.HDF5DataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.HDF5DataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.HDF5DataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.caffe.HDF5DataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.HDF5DataParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.HDF5DataParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.HDF5DataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 2;
 * @return {number}
 */
proto.caffe.HDF5DataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.HDF5DataParameter.prototype.setBatchSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.HDF5DataParameter.prototype.clearBatchSize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.HDF5DataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool shuffle = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.HDF5DataParameter.prototype.getShuffle = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.caffe.HDF5DataParameter.prototype.setShuffle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.HDF5DataParameter.prototype.clearShuffle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.HDF5DataParameter.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.HDF5OutputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.HDF5OutputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.HDF5OutputParameter.displayName = 'proto.caffe.HDF5OutputParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.HDF5OutputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.HDF5OutputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.HDF5OutputParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.HDF5OutputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileName: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.HDF5OutputParameter}
 */
proto.caffe.HDF5OutputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.HDF5OutputParameter;
  return proto.caffe.HDF5OutputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.HDF5OutputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.HDF5OutputParameter}
 */
proto.caffe.HDF5OutputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.HDF5OutputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.HDF5OutputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.HDF5OutputParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.HDF5OutputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string file_name = 1;
 * @return {string}
 */
proto.caffe.HDF5OutputParameter.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.HDF5OutputParameter.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.HDF5OutputParameter.prototype.clearFileName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.HDF5OutputParameter.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.HingeLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.HingeLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.HingeLossParameter.displayName = 'proto.caffe.HingeLossParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.HingeLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.HingeLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.HingeLossParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.HingeLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    norm: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.HingeLossParameter}
 */
proto.caffe.HingeLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.HingeLossParameter;
  return proto.caffe.HingeLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.HingeLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.HingeLossParameter}
 */
proto.caffe.HingeLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.HingeLossParameter.Norm} */ (reader.readEnum());
      msg.setNorm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.HingeLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.HingeLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.HingeLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.HingeLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.HingeLossParameter.Norm} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.HingeLossParameter.Norm = {
  L1: 1,
  L2: 2
};

/**
 * optional Norm norm = 1;
 * @return {!proto.caffe.HingeLossParameter.Norm}
 */
proto.caffe.HingeLossParameter.prototype.getNorm = function() {
  return /** @type {!proto.caffe.HingeLossParameter.Norm} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.caffe.HingeLossParameter.Norm} value */
proto.caffe.HingeLossParameter.prototype.setNorm = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.HingeLossParameter.prototype.clearNorm = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.HingeLossParameter.prototype.hasNorm = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ImageDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ImageDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ImageDataParameter.displayName = 'proto.caffe.ImageDataParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ImageDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ImageDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ImageDataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ImageDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getField(msg, 1),
    batchSize: jspb.Message.getFieldWithDefault(msg, 4, 1),
    randSkip: jspb.Message.getFieldWithDefault(msg, 7, 0),
    shuffle: jspb.Message.getFieldWithDefault(msg, 8, false),
    newHeight: jspb.Message.getFieldWithDefault(msg, 9, 0),
    newWidth: jspb.Message.getFieldWithDefault(msg, 10, 0),
    isColor: jspb.Message.getFieldWithDefault(msg, 11, true),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    meanFile: jspb.Message.getField(msg, 3),
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getFieldWithDefault(msg, 6, false),
    rootFolder: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ImageDataParameter}
 */
proto.caffe.ImageDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ImageDataParameter;
  return proto.caffe.ImageDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ImageDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ImageDataParameter}
 */
proto.caffe.ImageDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewWidth(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ImageDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ImageDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ImageDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ImageDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.caffe.ImageDataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.ImageDataParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ImageDataParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setBatchSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.ImageDataParameter.prototype.clearBatchSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rand_skip = 7;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setRandSkip = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.ImageDataParameter.prototype.clearRandSkip = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool shuffle = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ImageDataParameter.prototype.getShuffle = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.caffe.ImageDataParameter.prototype.setShuffle = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.ImageDataParameter.prototype.clearShuffle = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasShuffle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 new_height = 9;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getNewHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setNewHeight = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.ImageDataParameter.prototype.clearNewHeight = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasNewHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 new_width = 10;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getNewWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setNewWidth = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.ImageDataParameter.prototype.clearNewWidth = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasNewWidth = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool is_color = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ImageDataParameter.prototype.getIsColor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, true));
};


/** @param {boolean} value */
proto.caffe.ImageDataParameter.prototype.setIsColor = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.ImageDataParameter.prototype.clearIsColor = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasIsColor = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ImageDataParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.caffe.ImageDataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.caffe.ImageDataParameter.prototype.setMeanFile = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ImageDataParameter.prototype.clearMeanFile = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.caffe.ImageDataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.caffe.ImageDataParameter.prototype.setCropSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.ImageDataParameter.prototype.clearCropSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ImageDataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.caffe.ImageDataParameter.prototype.setMirror = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.ImageDataParameter.prototype.clearMirror = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string root_folder = 12;
 * @return {string}
 */
proto.caffe.ImageDataParameter.prototype.getRootFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.caffe.ImageDataParameter.prototype.setRootFolder = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.ImageDataParameter.prototype.clearRootFolder = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ImageDataParameter.prototype.hasRootFolder = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.InfogainLossParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.InfogainLossParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.InfogainLossParameter.displayName = 'proto.caffe.InfogainLossParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.InfogainLossParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.InfogainLossParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.InfogainLossParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.InfogainLossParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.InfogainLossParameter}
 */
proto.caffe.InfogainLossParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.InfogainLossParameter;
  return proto.caffe.InfogainLossParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.InfogainLossParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.InfogainLossParameter}
 */
proto.caffe.InfogainLossParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.InfogainLossParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.InfogainLossParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.InfogainLossParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.InfogainLossParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.caffe.InfogainLossParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.InfogainLossParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.InfogainLossParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InfogainLossParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.InnerProductParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.InnerProductParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.InnerProductParameter.displayName = 'proto.caffe.InnerProductParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.InnerProductParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.InnerProductParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.InnerProductParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.InnerProductParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: jspb.Message.getField(msg, 1),
    biasTerm: jspb.Message.getFieldWithDefault(msg, 2, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    axis: jspb.Message.getFieldWithDefault(msg, 5, 1),
    transpose: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.InnerProductParameter}
 */
proto.caffe.InnerProductParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.InnerProductParameter;
  return proto.caffe.InnerProductParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.InnerProductParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.InnerProductParameter}
 */
proto.caffe.InnerProductParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 3:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 4:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTranspose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.InnerProductParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.InnerProductParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.InnerProductParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.InnerProductParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.caffe.InnerProductParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.InnerProductParameter.prototype.setNumOutput = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.InnerProductParameter.prototype.clearNumOutput = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool bias_term = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.InnerProductParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, true));
};


/** @param {boolean} value */
proto.caffe.InnerProductParameter.prototype.setBiasTerm = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.InnerProductParameter.prototype.clearBiasTerm = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter weight_filler = 3;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.InnerProductParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 3));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.InnerProductParameter.prototype.setWeightFiller = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.caffe.InnerProductParameter.prototype.clearWeightFiller = function() {
  this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FillerParameter bias_filler = 4;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.InnerProductParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 4));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.InnerProductParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.caffe.InnerProductParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 axis = 5;
 * @return {number}
 */
proto.caffe.InnerProductParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {number} value */
proto.caffe.InnerProductParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.InnerProductParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool transpose = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.InnerProductParameter.prototype.getTranspose = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.caffe.InnerProductParameter.prototype.setTranspose = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.InnerProductParameter.prototype.clearTranspose = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.InnerProductParameter.prototype.hasTranspose = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.InputParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.InputParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.InputParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.InputParameter.displayName = 'proto.caffe.InputParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.InputParameter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.InputParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.InputParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.InputParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.InputParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shapeList: jspb.Message.toObjectList(msg.getShapeList(),
    proto.caffe.BlobShape.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.InputParameter}
 */
proto.caffe.InputParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.InputParameter;
  return proto.caffe.InputParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.InputParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.InputParameter}
 */
proto.caffe.InputParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.addShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.InputParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.InputParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.InputParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.InputParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlobShape shape = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobShape>}
 */
proto.caffe.InputParameter.prototype.getShapeList = function() {
  return /** @type{!Array.<!proto.caffe.BlobShape>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobShape, 1));
};


/** @param {!Array.<!proto.caffe.BlobShape>} value */
proto.caffe.InputParameter.prototype.setShapeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.caffe.BlobShape=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobShape}
 */
proto.caffe.InputParameter.prototype.addShape = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.caffe.BlobShape, opt_index);
};


proto.caffe.InputParameter.prototype.clearShapeList = function() {
  this.setShapeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.LogParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.LogParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.LogParameter.displayName = 'proto.caffe.LogParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.LogParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.LogParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.LogParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.LogParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: +jspb.Message.getFieldWithDefault(msg, 1, -1.0),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    shift: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.LogParameter}
 */
proto.caffe.LogParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.LogParameter;
  return proto.caffe.LogParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.LogParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.LogParameter}
 */
proto.caffe.LogParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.LogParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.LogParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.LogParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.LogParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float base = 1;
 * @return {number}
 */
proto.caffe.LogParameter.prototype.getBase = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, -1.0));
};


/** @param {number} value */
proto.caffe.LogParameter.prototype.setBase = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.LogParameter.prototype.clearBase = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LogParameter.prototype.hasBase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.LogParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.LogParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.LogParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LogParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.caffe.LogParameter.prototype.getShift = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.caffe.LogParameter.prototype.setShift = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.LogParameter.prototype.clearShift = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LogParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.LRNParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.LRNParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.LRNParameter.displayName = 'proto.caffe.LRNParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.LRNParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.LRNParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.LRNParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.LRNParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    localSize: jspb.Message.getFieldWithDefault(msg, 1, 5),
    alpha: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    beta: +jspb.Message.getFieldWithDefault(msg, 3, 0.75),
    normRegion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    k: +jspb.Message.getFieldWithDefault(msg, 5, 1.0),
    engine: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.LRNParameter}
 */
proto.caffe.LRNParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.LRNParameter;
  return proto.caffe.LRNParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.LRNParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.LRNParameter}
 */
proto.caffe.LRNParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBeta(value);
      break;
    case 4:
      var value = /** @type {!proto.caffe.LRNParameter.NormRegion} */ (reader.readEnum());
      msg.setNormRegion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setK(value);
      break;
    case 6:
      var value = /** @type {!proto.caffe.LRNParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.LRNParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.LRNParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.LRNParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.LRNParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.caffe.LRNParameter.NormRegion} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {!proto.caffe.LRNParameter.Engine} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.LRNParameter.NormRegion = {
  ACROSS_CHANNELS: 0,
  WITHIN_CHANNEL: 1
};

/**
 * @enum {number}
 */
proto.caffe.LRNParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 local_size = 1;
 * @return {number}
 */
proto.caffe.LRNParameter.prototype.getLocalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 5));
};


/** @param {number} value */
proto.caffe.LRNParameter.prototype.setLocalSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.LRNParameter.prototype.clearLocalSize = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasLocalSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float alpha = 2;
 * @return {number}
 */
proto.caffe.LRNParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.LRNParameter.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.LRNParameter.prototype.clearAlpha = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float beta = 3;
 * @return {number}
 */
proto.caffe.LRNParameter.prototype.getBeta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.75));
};


/** @param {number} value */
proto.caffe.LRNParameter.prototype.setBeta = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.LRNParameter.prototype.clearBeta = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NormRegion norm_region = 4;
 * @return {!proto.caffe.LRNParameter.NormRegion}
 */
proto.caffe.LRNParameter.prototype.getNormRegion = function() {
  return /** @type {!proto.caffe.LRNParameter.NormRegion} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.caffe.LRNParameter.NormRegion} value */
proto.caffe.LRNParameter.prototype.setNormRegion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.LRNParameter.prototype.clearNormRegion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasNormRegion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float k = 5;
 * @return {number}
 */
proto.caffe.LRNParameter.prototype.getK = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 1.0));
};


/** @param {number} value */
proto.caffe.LRNParameter.prototype.setK = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.LRNParameter.prototype.clearK = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasK = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Engine engine = 6;
 * @return {!proto.caffe.LRNParameter.Engine}
 */
proto.caffe.LRNParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.LRNParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.caffe.LRNParameter.Engine} value */
proto.caffe.LRNParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.LRNParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.LRNParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.MemoryDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.MemoryDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.MemoryDataParameter.displayName = 'proto.caffe.MemoryDataParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.MemoryDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.MemoryDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.MemoryDataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.MemoryDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchSize: jspb.Message.getField(msg, 1),
    channels: jspb.Message.getField(msg, 2),
    height: jspb.Message.getField(msg, 3),
    width: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.MemoryDataParameter}
 */
proto.caffe.MemoryDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.MemoryDataParameter;
  return proto.caffe.MemoryDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.MemoryDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.MemoryDataParameter}
 */
proto.caffe.MemoryDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.MemoryDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.MemoryDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.MemoryDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.MemoryDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 batch_size = 1;
 * @return {number}
 */
proto.caffe.MemoryDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.MemoryDataParameter.prototype.setBatchSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.MemoryDataParameter.prototype.clearBatchSize = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MemoryDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 channels = 2;
 * @return {number}
 */
proto.caffe.MemoryDataParameter.prototype.getChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.MemoryDataParameter.prototype.setChannels = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.MemoryDataParameter.prototype.clearChannels = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MemoryDataParameter.prototype.hasChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.caffe.MemoryDataParameter.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.MemoryDataParameter.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.MemoryDataParameter.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MemoryDataParameter.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 width = 4;
 * @return {number}
 */
proto.caffe.MemoryDataParameter.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.MemoryDataParameter.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.MemoryDataParameter.prototype.clearWidth = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MemoryDataParameter.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.MVNParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.MVNParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.MVNParameter.displayName = 'proto.caffe.MVNParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.MVNParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.MVNParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.MVNParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.MVNParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    normalizeVariance: jspb.Message.getFieldWithDefault(msg, 1, true),
    acrossChannels: jspb.Message.getFieldWithDefault(msg, 2, false),
    eps: +jspb.Message.getFieldWithDefault(msg, 3, 1.0E-9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.MVNParameter}
 */
proto.caffe.MVNParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.MVNParameter;
  return proto.caffe.MVNParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.MVNParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.MVNParameter}
 */
proto.caffe.MVNParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNormalizeVariance(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcrossChannels(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.MVNParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.MVNParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.MVNParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.MVNParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional bool normalize_variance = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.MVNParameter.prototype.getNormalizeVariance = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, true));
};


/** @param {boolean} value */
proto.caffe.MVNParameter.prototype.setNormalizeVariance = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.MVNParameter.prototype.clearNormalizeVariance = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MVNParameter.prototype.hasNormalizeVariance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool across_channels = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.MVNParameter.prototype.getAcrossChannels = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.caffe.MVNParameter.prototype.setAcrossChannels = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.MVNParameter.prototype.clearAcrossChannels = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MVNParameter.prototype.hasAcrossChannels = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float eps = 3;
 * @return {number}
 */
proto.caffe.MVNParameter.prototype.getEps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 1.0E-9));
};


/** @param {number} value */
proto.caffe.MVNParameter.prototype.setEps = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.MVNParameter.prototype.clearEps = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.MVNParameter.prototype.hasEps = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ParameterParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ParameterParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ParameterParameter.displayName = 'proto.caffe.ParameterParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ParameterParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ParameterParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ParameterParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ParameterParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.caffe.BlobShape.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ParameterParameter}
 */
proto.caffe.ParameterParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ParameterParameter;
  return proto.caffe.ParameterParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ParameterParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ParameterParameter}
 */
proto.caffe.ParameterParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ParameterParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ParameterParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ParameterParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ParameterParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlobShape shape = 1;
 * @return {?proto.caffe.BlobShape}
 */
proto.caffe.ParameterParameter.prototype.getShape = function() {
  return /** @type{?proto.caffe.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.caffe.BlobShape, 1));
};


/** @param {?proto.caffe.BlobShape|undefined} value */
proto.caffe.ParameterParameter.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.caffe.ParameterParameter.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ParameterParameter.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.PoolingParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.PoolingParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.PoolingParameter.displayName = 'proto.caffe.PoolingParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.PoolingParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.PoolingParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.PoolingParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.PoolingParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pool: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pad: jspb.Message.getFieldWithDefault(msg, 4, 0),
    padH: jspb.Message.getFieldWithDefault(msg, 9, 0),
    padW: jspb.Message.getFieldWithDefault(msg, 10, 0),
    kernelSize: jspb.Message.getField(msg, 2),
    kernelH: jspb.Message.getField(msg, 5),
    kernelW: jspb.Message.getField(msg, 6),
    stride: jspb.Message.getFieldWithDefault(msg, 3, 1),
    strideH: jspb.Message.getField(msg, 7),
    strideW: jspb.Message.getField(msg, 8),
    engine: jspb.Message.getFieldWithDefault(msg, 11, 0),
    globalPooling: jspb.Message.getFieldWithDefault(msg, 12, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.PoolingParameter}
 */
proto.caffe.PoolingParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.PoolingParameter;
  return proto.caffe.PoolingParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.PoolingParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.PoolingParameter}
 */
proto.caffe.PoolingParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.PoolingParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPad(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadH(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPadW(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelH(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelW(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStride(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideH(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStrideW(value);
      break;
    case 11:
      var value = /** @type {!proto.caffe.PoolingParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGlobalPooling(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.PoolingParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.PoolingParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.PoolingParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.PoolingParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.PoolingParameter.PoolMethod} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.caffe.PoolingParameter.Engine} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.PoolingParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * @enum {number}
 */
proto.caffe.PoolingParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional PoolMethod pool = 1;
 * @return {!proto.caffe.PoolingParameter.PoolMethod}
 */
proto.caffe.PoolingParameter.prototype.getPool = function() {
  return /** @type {!proto.caffe.PoolingParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.caffe.PoolingParameter.PoolMethod} value */
proto.caffe.PoolingParameter.prototype.setPool = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.PoolingParameter.prototype.clearPool = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 pad = 4;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setPad = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.PoolingParameter.prototype.clearPad = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasPad = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 pad_h = 9;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getPadH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setPadH = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.PoolingParameter.prototype.clearPadH = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasPadH = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pad_w = 10;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getPadW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setPadW = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.PoolingParameter.prototype.clearPadW = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasPadW = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 kernel_size = 2;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getKernelSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setKernelSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.PoolingParameter.prototype.clearKernelSize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasKernelSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 kernel_h = 5;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getKernelH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setKernelH = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.PoolingParameter.prototype.clearKernelH = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasKernelH = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 kernel_w = 6;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getKernelW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setKernelW = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.PoolingParameter.prototype.clearKernelW = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasKernelW = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 stride = 3;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setStride = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.PoolingParameter.prototype.clearStride = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 stride_h = 7;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getStrideH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setStrideH = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.PoolingParameter.prototype.clearStrideH = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasStrideH = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 stride_w = 8;
 * @return {number}
 */
proto.caffe.PoolingParameter.prototype.getStrideW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.caffe.PoolingParameter.prototype.setStrideW = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.PoolingParameter.prototype.clearStrideW = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasStrideW = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Engine engine = 11;
 * @return {!proto.caffe.PoolingParameter.Engine}
 */
proto.caffe.PoolingParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.PoolingParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.caffe.PoolingParameter.Engine} value */
proto.caffe.PoolingParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.PoolingParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool global_pooling = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.PoolingParameter.prototype.getGlobalPooling = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.caffe.PoolingParameter.prototype.setGlobalPooling = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.PoolingParameter.prototype.clearGlobalPooling = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PoolingParameter.prototype.hasGlobalPooling = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.PowerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.PowerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.PowerParameter.displayName = 'proto.caffe.PowerParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.PowerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.PowerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.PowerParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.PowerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: +jspb.Message.getFieldWithDefault(msg, 1, 1.0),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    shift: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.PowerParameter}
 */
proto.caffe.PowerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.PowerParameter;
  return proto.caffe.PowerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.PowerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.PowerParameter}
 */
proto.caffe.PowerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setShift(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.PowerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.PowerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.PowerParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.PowerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float power = 1;
 * @return {number}
 */
proto.caffe.PowerParameter.prototype.getPower = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 1.0));
};


/** @param {number} value */
proto.caffe.PowerParameter.prototype.setPower = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.PowerParameter.prototype.clearPower = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PowerParameter.prototype.hasPower = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.PowerParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.PowerParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.PowerParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PowerParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float shift = 3;
 * @return {number}
 */
proto.caffe.PowerParameter.prototype.getShift = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.caffe.PowerParameter.prototype.setShift = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.PowerParameter.prototype.clearShift = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PowerParameter.prototype.hasShift = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.PythonParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.PythonParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.PythonParameter.displayName = 'proto.caffe.PythonParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.PythonParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.PythonParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.PythonParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.PythonParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    module: jspb.Message.getField(msg, 1),
    layer: jspb.Message.getField(msg, 2),
    paramStr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shareInParallel: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.PythonParameter}
 */
proto.caffe.PythonParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.PythonParameter;
  return proto.caffe.PythonParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.PythonParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.PythonParameter}
 */
proto.caffe.PythonParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamStr(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShareInParallel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.PythonParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.PythonParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.PythonParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.PythonParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string module = 1;
 * @return {string}
 */
proto.caffe.PythonParameter.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.PythonParameter.prototype.setModule = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.PythonParameter.prototype.clearModule = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PythonParameter.prototype.hasModule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string layer = 2;
 * @return {string}
 */
proto.caffe.PythonParameter.prototype.getLayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.caffe.PythonParameter.prototype.setLayer = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.PythonParameter.prototype.clearLayer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PythonParameter.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string param_str = 3;
 * @return {string}
 */
proto.caffe.PythonParameter.prototype.getParamStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.caffe.PythonParameter.prototype.setParamStr = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.PythonParameter.prototype.clearParamStr = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PythonParameter.prototype.hasParamStr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool share_in_parallel = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.PythonParameter.prototype.getShareInParallel = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.caffe.PythonParameter.prototype.setShareInParallel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.PythonParameter.prototype.clearShareInParallel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PythonParameter.prototype.hasShareInParallel = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.RecurrentParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.RecurrentParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.RecurrentParameter.displayName = 'proto.caffe.RecurrentParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.RecurrentParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.RecurrentParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.RecurrentParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.RecurrentParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    numOutput: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weightFiller: (f = msg.getWeightFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    debugInfo: jspb.Message.getFieldWithDefault(msg, 4, false),
    exposeHidden: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.RecurrentParameter}
 */
proto.caffe.RecurrentParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.RecurrentParameter;
  return proto.caffe.RecurrentParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.RecurrentParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.RecurrentParameter}
 */
proto.caffe.RecurrentParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 2:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 3:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExposeHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.RecurrentParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.RecurrentParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.RecurrentParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.RecurrentParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint32 num_output = 1;
 * @return {number}
 */
proto.caffe.RecurrentParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.RecurrentParameter.prototype.setNumOutput = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.RecurrentParameter.prototype.clearNumOutput = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.RecurrentParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FillerParameter weight_filler = 2;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.RecurrentParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 2));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.RecurrentParameter.prototype.setWeightFiller = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.caffe.RecurrentParameter.prototype.clearWeightFiller = function() {
  this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.RecurrentParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter bias_filler = 3;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.RecurrentParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 3));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.RecurrentParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.caffe.RecurrentParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.RecurrentParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool debug_info = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.RecurrentParameter.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.caffe.RecurrentParameter.prototype.setDebugInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.RecurrentParameter.prototype.clearDebugInfo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.RecurrentParameter.prototype.hasDebugInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool expose_hidden = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.RecurrentParameter.prototype.getExposeHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.caffe.RecurrentParameter.prototype.setExposeHidden = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.RecurrentParameter.prototype.clearExposeHidden = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.RecurrentParameter.prototype.hasExposeHidden = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ReductionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ReductionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ReductionParameter.displayName = 'proto.caffe.ReductionParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ReductionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ReductionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ReductionParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ReductionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 1),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    coeff: +jspb.Message.getFieldWithDefault(msg, 3, 1.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ReductionParameter}
 */
proto.caffe.ReductionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ReductionParameter;
  return proto.caffe.ReductionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ReductionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ReductionParameter}
 */
proto.caffe.ReductionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.ReductionParameter.ReductionOp} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCoeff(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ReductionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ReductionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ReductionParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ReductionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.ReductionParameter.ReductionOp} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.ReductionParameter.ReductionOp = {
  SUM: 1,
  ASUM: 2,
  SUMSQ: 3,
  MEAN: 4
};

/**
 * optional ReductionOp operation = 1;
 * @return {!proto.caffe.ReductionParameter.ReductionOp}
 */
proto.caffe.ReductionParameter.prototype.getOperation = function() {
  return /** @type {!proto.caffe.ReductionParameter.ReductionOp} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.caffe.ReductionParameter.ReductionOp} value */
proto.caffe.ReductionParameter.prototype.setOperation = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ReductionParameter.prototype.clearOperation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReductionParameter.prototype.hasOperation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.caffe.ReductionParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.ReductionParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ReductionParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReductionParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float coeff = 3;
 * @return {number}
 */
proto.caffe.ReductionParameter.prototype.getCoeff = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 1.0));
};


/** @param {number} value */
proto.caffe.ReductionParameter.prototype.setCoeff = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ReductionParameter.prototype.clearCoeff = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReductionParameter.prototype.hasCoeff = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ReLUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ReLUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ReLUParameter.displayName = 'proto.caffe.ReLUParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ReLUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ReLUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ReLUParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ReLUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    negativeSlope: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    engine: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ReLUParameter}
 */
proto.caffe.ReLUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ReLUParameter;
  return proto.caffe.ReLUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ReLUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ReLUParameter}
 */
proto.caffe.ReLUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNegativeSlope(value);
      break;
    case 2:
      var value = /** @type {!proto.caffe.ReLUParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ReLUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ReLUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ReLUParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ReLUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {!proto.caffe.ReLUParameter.Engine} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.ReLUParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional float negative_slope = 1;
 * @return {number}
 */
proto.caffe.ReLUParameter.prototype.getNegativeSlope = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.caffe.ReLUParameter.prototype.setNegativeSlope = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ReLUParameter.prototype.clearNegativeSlope = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReLUParameter.prototype.hasNegativeSlope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Engine engine = 2;
 * @return {!proto.caffe.ReLUParameter.Engine}
 */
proto.caffe.ReLUParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.ReLUParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.caffe.ReLUParameter.Engine} value */
proto.caffe.ReLUParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ReLUParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReLUParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ReshapeParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ReshapeParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ReshapeParameter.displayName = 'proto.caffe.ReshapeParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ReshapeParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ReshapeParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ReshapeParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ReshapeParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    shape: (f = msg.getShape()) && proto.caffe.BlobShape.toObject(includeInstance, f),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numAxes: jspb.Message.getFieldWithDefault(msg, 3, -1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ReshapeParameter}
 */
proto.caffe.ReshapeParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ReshapeParameter;
  return proto.caffe.ReshapeParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ReshapeParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ReshapeParameter}
 */
proto.caffe.ReshapeParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.BlobShape;
      reader.readMessage(value,proto.caffe.BlobShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ReshapeParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ReshapeParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ReshapeParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ReshapeParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShape();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.caffe.BlobShape.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional BlobShape shape = 1;
 * @return {?proto.caffe.BlobShape}
 */
proto.caffe.ReshapeParameter.prototype.getShape = function() {
  return /** @type{?proto.caffe.BlobShape} */ (
    jspb.Message.getWrapperField(this, proto.caffe.BlobShape, 1));
};


/** @param {?proto.caffe.BlobShape|undefined} value */
proto.caffe.ReshapeParameter.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.caffe.ReshapeParameter.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReshapeParameter.prototype.hasShape = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.caffe.ReshapeParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.ReshapeParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ReshapeParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReshapeParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 num_axes = 3;
 * @return {number}
 */
proto.caffe.ReshapeParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, -1));
};


/** @param {number} value */
proto.caffe.ReshapeParameter.prototype.setNumAxes = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.ReshapeParameter.prototype.clearNumAxes = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ReshapeParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ScaleParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ScaleParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ScaleParameter.displayName = 'proto.caffe.ScaleParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ScaleParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ScaleParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ScaleParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ScaleParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    numAxes: jspb.Message.getFieldWithDefault(msg, 2, 1),
    filler: (f = msg.getFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasTerm: jspb.Message.getFieldWithDefault(msg, 4, false),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ScaleParameter}
 */
proto.caffe.ScaleParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ScaleParameter;
  return proto.caffe.ScaleParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ScaleParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ScaleParameter}
 */
proto.caffe.ScaleParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumAxes(value);
      break;
    case 3:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasTerm(value);
      break;
    case 5:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ScaleParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ScaleParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ScaleParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ScaleParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.caffe.ScaleParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.ScaleParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ScaleParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ScaleParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 num_axes = 2;
 * @return {number}
 */
proto.caffe.ScaleParameter.prototype.getNumAxes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.ScaleParameter.prototype.setNumAxes = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.ScaleParameter.prototype.clearNumAxes = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ScaleParameter.prototype.hasNumAxes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FillerParameter filler = 3;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.ScaleParameter.prototype.getFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 3));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.ScaleParameter.prototype.setFiller = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.caffe.ScaleParameter.prototype.clearFiller = function() {
  this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ScaleParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bias_term = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.ScaleParameter.prototype.getBiasTerm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.caffe.ScaleParameter.prototype.setBiasTerm = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.ScaleParameter.prototype.clearBiasTerm = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ScaleParameter.prototype.hasBiasTerm = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter bias_filler = 5;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.ScaleParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 5));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.ScaleParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.caffe.ScaleParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ScaleParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SigmoidParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.SigmoidParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SigmoidParameter.displayName = 'proto.caffe.SigmoidParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SigmoidParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SigmoidParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SigmoidParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SigmoidParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SigmoidParameter}
 */
proto.caffe.SigmoidParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SigmoidParameter;
  return proto.caffe.SigmoidParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SigmoidParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SigmoidParameter}
 */
proto.caffe.SigmoidParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.SigmoidParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SigmoidParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SigmoidParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SigmoidParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SigmoidParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.SigmoidParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.SigmoidParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.caffe.SigmoidParameter.Engine}
 */
proto.caffe.SigmoidParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.SigmoidParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.caffe.SigmoidParameter.Engine} value */
proto.caffe.SigmoidParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SigmoidParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SigmoidParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SliceParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.SliceParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.SliceParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SliceParameter.displayName = 'proto.caffe.SliceParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.SliceParameter.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SliceParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SliceParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SliceParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SliceParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 3, 1),
    slicePointList: jspb.Message.getField(msg, 2),
    sliceDim: jspb.Message.getFieldWithDefault(msg, 1, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SliceParameter}
 */
proto.caffe.SliceParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SliceParameter;
  return proto.caffe.SliceParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SliceParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SliceParameter}
 */
proto.caffe.SliceParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.addSlicePoint(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSliceDim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SliceParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SliceParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SliceParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SliceParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSlicePointList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional int32 axis = 3;
 * @return {number}
 */
proto.caffe.SliceParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {number} value */
proto.caffe.SliceParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.SliceParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SliceParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 slice_point = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.SliceParameter.prototype.getSlicePointList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.caffe.SliceParameter.prototype.setSlicePointList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.SliceParameter.prototype.addSlicePoint = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.SliceParameter.prototype.clearSlicePointList = function() {
  this.setSlicePointList([]);
};


/**
 * optional uint32 slice_dim = 1;
 * @return {number}
 */
proto.caffe.SliceParameter.prototype.getSliceDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.SliceParameter.prototype.setSliceDim = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SliceParameter.prototype.clearSliceDim = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SliceParameter.prototype.hasSliceDim = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SoftmaxParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.SoftmaxParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SoftmaxParameter.displayName = 'proto.caffe.SoftmaxParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SoftmaxParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SoftmaxParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SoftmaxParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SoftmaxParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0),
    axis: jspb.Message.getFieldWithDefault(msg, 2, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SoftmaxParameter}
 */
proto.caffe.SoftmaxParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SoftmaxParameter;
  return proto.caffe.SoftmaxParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SoftmaxParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SoftmaxParameter}
 */
proto.caffe.SoftmaxParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.SoftmaxParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SoftmaxParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SoftmaxParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SoftmaxParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SoftmaxParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.SoftmaxParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.SoftmaxParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.caffe.SoftmaxParameter.Engine}
 */
proto.caffe.SoftmaxParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.SoftmaxParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.caffe.SoftmaxParameter.Engine} value */
proto.caffe.SoftmaxParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SoftmaxParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SoftmaxParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 axis = 2;
 * @return {number}
 */
proto.caffe.SoftmaxParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {number} value */
proto.caffe.SoftmaxParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.SoftmaxParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SoftmaxParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.TanHParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.TanHParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.TanHParameter.displayName = 'proto.caffe.TanHParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.TanHParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.TanHParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.TanHParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.TanHParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    engine: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.TanHParameter}
 */
proto.caffe.TanHParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.TanHParameter;
  return proto.caffe.TanHParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.TanHParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.TanHParameter}
 */
proto.caffe.TanHParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.caffe.TanHParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.TanHParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.TanHParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.TanHParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.TanHParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.caffe.TanHParameter.Engine} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.TanHParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional Engine engine = 1;
 * @return {!proto.caffe.TanHParameter.Engine}
 */
proto.caffe.TanHParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.TanHParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.caffe.TanHParameter.Engine} value */
proto.caffe.TanHParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.TanHParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TanHParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.TileParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.TileParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.TileParameter.displayName = 'proto.caffe.TileParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.TileParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.TileParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.TileParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.TileParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    axis: jspb.Message.getFieldWithDefault(msg, 1, 1),
    tiles: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.TileParameter}
 */
proto.caffe.TileParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.TileParameter;
  return proto.caffe.TileParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.TileParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.TileParameter}
 */
proto.caffe.TileParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAxis(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTiles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.TileParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.TileParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.TileParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.TileParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 axis = 1;
 * @return {number}
 */
proto.caffe.TileParameter.prototype.getAxis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {number} value */
proto.caffe.TileParameter.prototype.setAxis = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.TileParameter.prototype.clearAxis = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TileParameter.prototype.hasAxis = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 tiles = 2;
 * @return {number}
 */
proto.caffe.TileParameter.prototype.getTiles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.caffe.TileParameter.prototype.setTiles = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.TileParameter.prototype.clearTiles = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.TileParameter.prototype.hasTiles = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.ThresholdParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.ThresholdParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.ThresholdParameter.displayName = 'proto.caffe.ThresholdParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.ThresholdParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.ThresholdParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.ThresholdParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.ThresholdParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.ThresholdParameter}
 */
proto.caffe.ThresholdParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.ThresholdParameter;
  return proto.caffe.ThresholdParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.ThresholdParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.ThresholdParameter}
 */
proto.caffe.ThresholdParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.ThresholdParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.ThresholdParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.ThresholdParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.ThresholdParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float threshold = 1;
 * @return {number}
 */
proto.caffe.ThresholdParameter.prototype.getThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.caffe.ThresholdParameter.prototype.setThreshold = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.ThresholdParameter.prototype.clearThreshold = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.ThresholdParameter.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.WindowDataParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.WindowDataParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.WindowDataParameter.displayName = 'proto.caffe.WindowDataParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.WindowDataParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.WindowDataParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.WindowDataParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.WindowDataParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getField(msg, 1),
    scale: +jspb.Message.getFieldWithDefault(msg, 2, 1.0),
    meanFile: jspb.Message.getField(msg, 3),
    batchSize: jspb.Message.getField(msg, 4),
    cropSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mirror: jspb.Message.getFieldWithDefault(msg, 6, false),
    fgThreshold: +jspb.Message.getFieldWithDefault(msg, 7, 0.5),
    bgThreshold: +jspb.Message.getFieldWithDefault(msg, 8, 0.5),
    fgFraction: +jspb.Message.getFieldWithDefault(msg, 9, 0.25),
    contextPad: jspb.Message.getFieldWithDefault(msg, 10, 0),
    cropMode: jspb.Message.getFieldWithDefault(msg, 11, "warp"),
    cacheImages: jspb.Message.getFieldWithDefault(msg, 12, false),
    rootFolder: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.WindowDataParameter}
 */
proto.caffe.WindowDataParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.WindowDataParameter;
  return proto.caffe.WindowDataParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.WindowDataParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.WindowDataParameter}
 */
proto.caffe.WindowDataParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanFile(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropSize(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFgThreshold(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBgThreshold(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFgFraction(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContextPad(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCropMode(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCacheImages(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.WindowDataParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.WindowDataParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.WindowDataParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.WindowDataParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.caffe.WindowDataParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.WindowDataParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.WindowDataParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float scale = 2;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 1.0));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.WindowDataParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mean_file = 3;
 * @return {string}
 */
proto.caffe.WindowDataParameter.prototype.getMeanFile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.caffe.WindowDataParameter.prototype.setMeanFile = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.WindowDataParameter.prototype.clearMeanFile = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasMeanFile = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 batch_size = 4;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getBatchSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setBatchSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.WindowDataParameter.prototype.clearBatchSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasBatchSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 crop_size = 5;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getCropSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setCropSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.WindowDataParameter.prototype.clearCropSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasCropSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool mirror = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.WindowDataParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.caffe.WindowDataParameter.prototype.setMirror = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.WindowDataParameter.prototype.clearMirror = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float fg_threshold = 7;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getFgThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.5));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setFgThreshold = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.WindowDataParameter.prototype.clearFgThreshold = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasFgThreshold = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float bg_threshold = 8;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getBgThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.5));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setBgThreshold = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.WindowDataParameter.prototype.clearBgThreshold = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasBgThreshold = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float fg_fraction = 9;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getFgFraction = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.25));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setFgFraction = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.WindowDataParameter.prototype.clearFgFraction = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasFgFraction = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 context_pad = 10;
 * @return {number}
 */
proto.caffe.WindowDataParameter.prototype.getContextPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.caffe.WindowDataParameter.prototype.setContextPad = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.WindowDataParameter.prototype.clearContextPad = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasContextPad = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string crop_mode = 11;
 * @return {string}
 */
proto.caffe.WindowDataParameter.prototype.getCropMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "warp"));
};


/** @param {string} value */
proto.caffe.WindowDataParameter.prototype.setCropMode = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.WindowDataParameter.prototype.clearCropMode = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasCropMode = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool cache_images = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.WindowDataParameter.prototype.getCacheImages = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.caffe.WindowDataParameter.prototype.setCacheImages = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.WindowDataParameter.prototype.clearCacheImages = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasCacheImages = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string root_folder = 13;
 * @return {string}
 */
proto.caffe.WindowDataParameter.prototype.getRootFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.caffe.WindowDataParameter.prototype.setRootFolder = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.caffe.WindowDataParameter.prototype.clearRootFolder = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.WindowDataParameter.prototype.hasRootFolder = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.SPPParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.SPPParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.SPPParameter.displayName = 'proto.caffe.SPPParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.SPPParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.SPPParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.SPPParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.SPPParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pyramidHeight: jspb.Message.getField(msg, 1),
    pool: jspb.Message.getFieldWithDefault(msg, 2, 0),
    engine: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.SPPParameter}
 */
proto.caffe.SPPParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.SPPParameter;
  return proto.caffe.SPPParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.SPPParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.SPPParameter}
 */
proto.caffe.SPPParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPyramidHeight(value);
      break;
    case 2:
      var value = /** @type {!proto.caffe.SPPParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 6:
      var value = /** @type {!proto.caffe.SPPParameter.Engine} */ (reader.readEnum());
      msg.setEngine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.SPPParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.SPPParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.SPPParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.SPPParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.caffe.SPPParameter.PoolMethod} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.caffe.SPPParameter.Engine} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.SPPParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * @enum {number}
 */
proto.caffe.SPPParameter.Engine = {
  DEFAULT: 0,
  CAFFE: 1,
  CUDNN: 2
};

/**
 * optional uint32 pyramid_height = 1;
 * @return {number}
 */
proto.caffe.SPPParameter.prototype.getPyramidHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.caffe.SPPParameter.prototype.setPyramidHeight = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.SPPParameter.prototype.clearPyramidHeight = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SPPParameter.prototype.hasPyramidHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PoolMethod pool = 2;
 * @return {!proto.caffe.SPPParameter.PoolMethod}
 */
proto.caffe.SPPParameter.prototype.getPool = function() {
  return /** @type {!proto.caffe.SPPParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.caffe.SPPParameter.PoolMethod} value */
proto.caffe.SPPParameter.prototype.setPool = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.SPPParameter.prototype.clearPool = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SPPParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Engine engine = 6;
 * @return {!proto.caffe.SPPParameter.Engine}
 */
proto.caffe.SPPParameter.prototype.getEngine = function() {
  return /** @type {!proto.caffe.SPPParameter.Engine} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.caffe.SPPParameter.Engine} value */
proto.caffe.SPPParameter.prototype.setEngine = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.caffe.SPPParameter.prototype.clearEngine = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.SPPParameter.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.V1LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.V1LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.V1LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.V1LayerParameter.displayName = 'proto.caffe.V1LayerParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.V1LayerParameter.repeatedFields_ = [2,3,32,33,6,1001,1002,7,8,35];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.V1LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.V1LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.V1LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.V1LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    bottomList: jspb.Message.getField(msg, 2),
    topList: jspb.Message.getField(msg, 3),
    name: jspb.Message.getField(msg, 4),
    includeList: jspb.Message.toObjectList(msg.getIncludeList(),
    proto.caffe.NetStateRule.toObject, includeInstance),
    excludeList: jspb.Message.toObjectList(msg.getExcludeList(),
    proto.caffe.NetStateRule.toObject, includeInstance),
    type: jspb.Message.getField(msg, 5),
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.caffe.BlobProto.toObject, includeInstance),
    paramList: jspb.Message.getField(msg, 1001),
    blobShareModeList: jspb.Message.getField(msg, 1002),
    blobsLrList: jspb.Message.getRepeatedFloatingPointField(msg, 7),
    weightDecayList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    lossWeightList: jspb.Message.getRepeatedFloatingPointField(msg, 35),
    accuracyParam: (f = msg.getAccuracyParam()) && proto.caffe.AccuracyParameter.toObject(includeInstance, f),
    argmaxParam: (f = msg.getArgmaxParam()) && proto.caffe.ArgMaxParameter.toObject(includeInstance, f),
    concatParam: (f = msg.getConcatParam()) && proto.caffe.ConcatParameter.toObject(includeInstance, f),
    contrastiveLossParam: (f = msg.getContrastiveLossParam()) && proto.caffe.ContrastiveLossParameter.toObject(includeInstance, f),
    convolutionParam: (f = msg.getConvolutionParam()) && proto.caffe.ConvolutionParameter.toObject(includeInstance, f),
    dataParam: (f = msg.getDataParam()) && proto.caffe.DataParameter.toObject(includeInstance, f),
    dropoutParam: (f = msg.getDropoutParam()) && proto.caffe.DropoutParameter.toObject(includeInstance, f),
    dummyDataParam: (f = msg.getDummyDataParam()) && proto.caffe.DummyDataParameter.toObject(includeInstance, f),
    eltwiseParam: (f = msg.getEltwiseParam()) && proto.caffe.EltwiseParameter.toObject(includeInstance, f),
    expParam: (f = msg.getExpParam()) && proto.caffe.ExpParameter.toObject(includeInstance, f),
    hdf5DataParam: (f = msg.getHdf5DataParam()) && proto.caffe.HDF5DataParameter.toObject(includeInstance, f),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.caffe.HDF5OutputParameter.toObject(includeInstance, f),
    hingeLossParam: (f = msg.getHingeLossParam()) && proto.caffe.HingeLossParameter.toObject(includeInstance, f),
    imageDataParam: (f = msg.getImageDataParam()) && proto.caffe.ImageDataParameter.toObject(includeInstance, f),
    infogainLossParam: (f = msg.getInfogainLossParam()) && proto.caffe.InfogainLossParameter.toObject(includeInstance, f),
    innerProductParam: (f = msg.getInnerProductParam()) && proto.caffe.InnerProductParameter.toObject(includeInstance, f),
    lrnParam: (f = msg.getLrnParam()) && proto.caffe.LRNParameter.toObject(includeInstance, f),
    memoryDataParam: (f = msg.getMemoryDataParam()) && proto.caffe.MemoryDataParameter.toObject(includeInstance, f),
    mvnParam: (f = msg.getMvnParam()) && proto.caffe.MVNParameter.toObject(includeInstance, f),
    poolingParam: (f = msg.getPoolingParam()) && proto.caffe.PoolingParameter.toObject(includeInstance, f),
    powerParam: (f = msg.getPowerParam()) && proto.caffe.PowerParameter.toObject(includeInstance, f),
    reluParam: (f = msg.getReluParam()) && proto.caffe.ReLUParameter.toObject(includeInstance, f),
    sigmoidParam: (f = msg.getSigmoidParam()) && proto.caffe.SigmoidParameter.toObject(includeInstance, f),
    softmaxParam: (f = msg.getSoftmaxParam()) && proto.caffe.SoftmaxParameter.toObject(includeInstance, f),
    sliceParam: (f = msg.getSliceParam()) && proto.caffe.SliceParameter.toObject(includeInstance, f),
    tanhParam: (f = msg.getTanhParam()) && proto.caffe.TanHParameter.toObject(includeInstance, f),
    thresholdParam: (f = msg.getThresholdParam()) && proto.caffe.ThresholdParameter.toObject(includeInstance, f),
    windowDataParam: (f = msg.getWindowDataParam()) && proto.caffe.WindowDataParameter.toObject(includeInstance, f),
    transformParam: (f = msg.getTransformParam()) && proto.caffe.TransformationParameter.toObject(includeInstance, f),
    lossParam: (f = msg.getLossParam()) && proto.caffe.LossParameter.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && proto.caffe.V0LayerParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.V1LayerParameter}
 */
proto.caffe.V1LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.V1LayerParameter;
  return proto.caffe.V1LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.V1LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.V1LayerParameter}
 */
proto.caffe.V1LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBottom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 32:
      var value = new proto.caffe.NetStateRule;
      reader.readMessage(value,proto.caffe.NetStateRule.deserializeBinaryFromReader);
      msg.addInclude(value);
      break;
    case 33:
      var value = new proto.caffe.NetStateRule;
      reader.readMessage(value,proto.caffe.NetStateRule.deserializeBinaryFromReader);
      msg.addExclude(value);
      break;
    case 5:
      var value = /** @type {!proto.caffe.V1LayerParameter.LayerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.caffe.BlobProto;
      reader.readMessage(value,proto.caffe.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 1001:
      var value = /** @type {string} */ (reader.readString());
      msg.addParam(value);
      break;
    case 1002:
      var value = /** @type {!proto.caffe.V1LayerParameter.DimCheckMode} */ (reader.readEnum());
      msg.addBlobShareMode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addBlobsLr(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addWeightDecay(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addLossWeight(value);
      break;
    case 27:
      var value = new proto.caffe.AccuracyParameter;
      reader.readMessage(value,proto.caffe.AccuracyParameter.deserializeBinaryFromReader);
      msg.setAccuracyParam(value);
      break;
    case 23:
      var value = new proto.caffe.ArgMaxParameter;
      reader.readMessage(value,proto.caffe.ArgMaxParameter.deserializeBinaryFromReader);
      msg.setArgmaxParam(value);
      break;
    case 9:
      var value = new proto.caffe.ConcatParameter;
      reader.readMessage(value,proto.caffe.ConcatParameter.deserializeBinaryFromReader);
      msg.setConcatParam(value);
      break;
    case 40:
      var value = new proto.caffe.ContrastiveLossParameter;
      reader.readMessage(value,proto.caffe.ContrastiveLossParameter.deserializeBinaryFromReader);
      msg.setContrastiveLossParam(value);
      break;
    case 10:
      var value = new proto.caffe.ConvolutionParameter;
      reader.readMessage(value,proto.caffe.ConvolutionParameter.deserializeBinaryFromReader);
      msg.setConvolutionParam(value);
      break;
    case 11:
      var value = new proto.caffe.DataParameter;
      reader.readMessage(value,proto.caffe.DataParameter.deserializeBinaryFromReader);
      msg.setDataParam(value);
      break;
    case 12:
      var value = new proto.caffe.DropoutParameter;
      reader.readMessage(value,proto.caffe.DropoutParameter.deserializeBinaryFromReader);
      msg.setDropoutParam(value);
      break;
    case 26:
      var value = new proto.caffe.DummyDataParameter;
      reader.readMessage(value,proto.caffe.DummyDataParameter.deserializeBinaryFromReader);
      msg.setDummyDataParam(value);
      break;
    case 24:
      var value = new proto.caffe.EltwiseParameter;
      reader.readMessage(value,proto.caffe.EltwiseParameter.deserializeBinaryFromReader);
      msg.setEltwiseParam(value);
      break;
    case 41:
      var value = new proto.caffe.ExpParameter;
      reader.readMessage(value,proto.caffe.ExpParameter.deserializeBinaryFromReader);
      msg.setExpParam(value);
      break;
    case 13:
      var value = new proto.caffe.HDF5DataParameter;
      reader.readMessage(value,proto.caffe.HDF5DataParameter.deserializeBinaryFromReader);
      msg.setHdf5DataParam(value);
      break;
    case 14:
      var value = new proto.caffe.HDF5OutputParameter;
      reader.readMessage(value,proto.caffe.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    case 29:
      var value = new proto.caffe.HingeLossParameter;
      reader.readMessage(value,proto.caffe.HingeLossParameter.deserializeBinaryFromReader);
      msg.setHingeLossParam(value);
      break;
    case 15:
      var value = new proto.caffe.ImageDataParameter;
      reader.readMessage(value,proto.caffe.ImageDataParameter.deserializeBinaryFromReader);
      msg.setImageDataParam(value);
      break;
    case 16:
      var value = new proto.caffe.InfogainLossParameter;
      reader.readMessage(value,proto.caffe.InfogainLossParameter.deserializeBinaryFromReader);
      msg.setInfogainLossParam(value);
      break;
    case 17:
      var value = new proto.caffe.InnerProductParameter;
      reader.readMessage(value,proto.caffe.InnerProductParameter.deserializeBinaryFromReader);
      msg.setInnerProductParam(value);
      break;
    case 18:
      var value = new proto.caffe.LRNParameter;
      reader.readMessage(value,proto.caffe.LRNParameter.deserializeBinaryFromReader);
      msg.setLrnParam(value);
      break;
    case 22:
      var value = new proto.caffe.MemoryDataParameter;
      reader.readMessage(value,proto.caffe.MemoryDataParameter.deserializeBinaryFromReader);
      msg.setMemoryDataParam(value);
      break;
    case 34:
      var value = new proto.caffe.MVNParameter;
      reader.readMessage(value,proto.caffe.MVNParameter.deserializeBinaryFromReader);
      msg.setMvnParam(value);
      break;
    case 19:
      var value = new proto.caffe.PoolingParameter;
      reader.readMessage(value,proto.caffe.PoolingParameter.deserializeBinaryFromReader);
      msg.setPoolingParam(value);
      break;
    case 21:
      var value = new proto.caffe.PowerParameter;
      reader.readMessage(value,proto.caffe.PowerParameter.deserializeBinaryFromReader);
      msg.setPowerParam(value);
      break;
    case 30:
      var value = new proto.caffe.ReLUParameter;
      reader.readMessage(value,proto.caffe.ReLUParameter.deserializeBinaryFromReader);
      msg.setReluParam(value);
      break;
    case 38:
      var value = new proto.caffe.SigmoidParameter;
      reader.readMessage(value,proto.caffe.SigmoidParameter.deserializeBinaryFromReader);
      msg.setSigmoidParam(value);
      break;
    case 39:
      var value = new proto.caffe.SoftmaxParameter;
      reader.readMessage(value,proto.caffe.SoftmaxParameter.deserializeBinaryFromReader);
      msg.setSoftmaxParam(value);
      break;
    case 31:
      var value = new proto.caffe.SliceParameter;
      reader.readMessage(value,proto.caffe.SliceParameter.deserializeBinaryFromReader);
      msg.setSliceParam(value);
      break;
    case 37:
      var value = new proto.caffe.TanHParameter;
      reader.readMessage(value,proto.caffe.TanHParameter.deserializeBinaryFromReader);
      msg.setTanhParam(value);
      break;
    case 25:
      var value = new proto.caffe.ThresholdParameter;
      reader.readMessage(value,proto.caffe.ThresholdParameter.deserializeBinaryFromReader);
      msg.setThresholdParam(value);
      break;
    case 20:
      var value = new proto.caffe.WindowDataParameter;
      reader.readMessage(value,proto.caffe.WindowDataParameter.deserializeBinaryFromReader);
      msg.setWindowDataParam(value);
      break;
    case 36:
      var value = new proto.caffe.TransformationParameter;
      reader.readMessage(value,proto.caffe.TransformationParameter.deserializeBinaryFromReader);
      msg.setTransformParam(value);
      break;
    case 42:
      var value = new proto.caffe.LossParameter;
      reader.readMessage(value,proto.caffe.LossParameter.deserializeBinaryFromReader);
      msg.setLossParam(value);
      break;
    case 1:
      var value = new proto.caffe.V0LayerParameter;
      reader.readMessage(value,proto.caffe.V0LayerParameter.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.V1LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.V1LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.V1LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.V1LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBottomList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTopList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIncludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      proto.caffe.NetStateRule.serializeBinaryToWriter
    );
  }
  f = message.getExcludeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.caffe.NetStateRule.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.caffe.V1LayerParameter.LayerType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.caffe.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1001,
      f
    );
  }
  f = message.getBlobShareModeList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      1002,
      f
    );
  }
  f = message.getBlobsLrList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      7,
      f
    );
  }
  f = message.getWeightDecayList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      8,
      f
    );
  }
  f = message.getLossWeightList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      35,
      f
    );
  }
  f = message.getAccuracyParam();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.caffe.AccuracyParameter.serializeBinaryToWriter
    );
  }
  f = message.getArgmaxParam();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.caffe.ArgMaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getConcatParam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.caffe.ConcatParameter.serializeBinaryToWriter
    );
  }
  f = message.getContrastiveLossParam();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.caffe.ContrastiveLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getConvolutionParam();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.caffe.ConvolutionParameter.serializeBinaryToWriter
    );
  }
  f = message.getDataParam();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.caffe.DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getDropoutParam();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.caffe.DropoutParameter.serializeBinaryToWriter
    );
  }
  f = message.getDummyDataParam();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.caffe.DummyDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getEltwiseParam();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.caffe.EltwiseParameter.serializeBinaryToWriter
    );
  }
  f = message.getExpParam();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.caffe.ExpParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5DataParam();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.caffe.HDF5DataParameter.serializeBinaryToWriter
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.caffe.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
  f = message.getHingeLossParam();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.caffe.HingeLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getImageDataParam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.caffe.ImageDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getInfogainLossParam();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.caffe.InfogainLossParameter.serializeBinaryToWriter
    );
  }
  f = message.getInnerProductParam();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.caffe.InnerProductParameter.serializeBinaryToWriter
    );
  }
  f = message.getLrnParam();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.caffe.LRNParameter.serializeBinaryToWriter
    );
  }
  f = message.getMemoryDataParam();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.caffe.MemoryDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getMvnParam();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.caffe.MVNParameter.serializeBinaryToWriter
    );
  }
  f = message.getPoolingParam();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.caffe.PoolingParameter.serializeBinaryToWriter
    );
  }
  f = message.getPowerParam();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.caffe.PowerParameter.serializeBinaryToWriter
    );
  }
  f = message.getReluParam();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.caffe.ReLUParameter.serializeBinaryToWriter
    );
  }
  f = message.getSigmoidParam();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.caffe.SigmoidParameter.serializeBinaryToWriter
    );
  }
  f = message.getSoftmaxParam();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.caffe.SoftmaxParameter.serializeBinaryToWriter
    );
  }
  f = message.getSliceParam();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.caffe.SliceParameter.serializeBinaryToWriter
    );
  }
  f = message.getTanhParam();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.caffe.TanHParameter.serializeBinaryToWriter
    );
  }
  f = message.getThresholdParam();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.caffe.ThresholdParameter.serializeBinaryToWriter
    );
  }
  f = message.getWindowDataParam();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.caffe.WindowDataParameter.serializeBinaryToWriter
    );
  }
  f = message.getTransformParam();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.caffe.TransformationParameter.serializeBinaryToWriter
    );
  }
  f = message.getLossParam();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.caffe.LossParameter.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.caffe.V0LayerParameter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.V1LayerParameter.LayerType = {
  NONE: 0,
  ABSVAL: 35,
  ACCURACY: 1,
  ARGMAX: 30,
  BNLL: 2,
  CONCAT: 3,
  CONTRASTIVE_LOSS: 37,
  CONVOLUTION: 4,
  DATA: 5,
  DECONVOLUTION: 39,
  DROPOUT: 6,
  DUMMY_DATA: 32,
  EUCLIDEAN_LOSS: 7,
  ELTWISE: 25,
  EXP: 38,
  FLATTEN: 8,
  HDF5_DATA: 9,
  HDF5_OUTPUT: 10,
  HINGE_LOSS: 28,
  IM2COL: 11,
  IMAGE_DATA: 12,
  INFOGAIN_LOSS: 13,
  INNER_PRODUCT: 14,
  LRN: 15,
  MEMORY_DATA: 29,
  MULTINOMIAL_LOGISTIC_LOSS: 16,
  MVN: 34,
  POOLING: 17,
  POWER: 26,
  RELU: 18,
  SIGMOID: 19,
  SIGMOID_CROSS_ENTROPY_LOSS: 27,
  SILENCE: 36,
  SOFTMAX: 20,
  SOFTMAX_LOSS: 21,
  SPLIT: 22,
  SLICE: 33,
  TANH: 23,
  WINDOW_DATA: 24,
  THRESHOLD: 31
};

/**
 * @enum {number}
 */
proto.caffe.V1LayerParameter.DimCheckMode = {
  STRICT: 0,
  PERMISSIVE: 1
};

/**
 * repeated string bottom = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.V1LayerParameter.prototype.getBottomList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.caffe.V1LayerParameter.prototype.setBottomList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addBottom = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearBottomList = function() {
  this.setBottomList([]);
};


/**
 * repeated string top = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.V1LayerParameter.prototype.getTopList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.caffe.V1LayerParameter.prototype.setTopList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addTop = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearTopList = function() {
  this.setTopList([]);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.caffe.V1LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.caffe.V1LayerParameter.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.V1LayerParameter.prototype.clearName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated NetStateRule include = 32;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetStateRule>}
 */
proto.caffe.V1LayerParameter.prototype.getIncludeList = function() {
  return /** @type{!Array.<!proto.caffe.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetStateRule, 32));
};


/** @param {!Array.<!proto.caffe.NetStateRule>} value */
proto.caffe.V1LayerParameter.prototype.setIncludeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.caffe.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.V1LayerParameter.prototype.addInclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.caffe.NetStateRule, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearIncludeList = function() {
  this.setIncludeList([]);
};


/**
 * repeated NetStateRule exclude = 33;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.NetStateRule>}
 */
proto.caffe.V1LayerParameter.prototype.getExcludeList = function() {
  return /** @type{!Array.<!proto.caffe.NetStateRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.NetStateRule, 33));
};


/** @param {!Array.<!proto.caffe.NetStateRule>} value */
proto.caffe.V1LayerParameter.prototype.setExcludeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.caffe.NetStateRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.NetStateRule}
 */
proto.caffe.V1LayerParameter.prototype.addExclude = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.caffe.NetStateRule, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearExcludeList = function() {
  this.setExcludeList([]);
};


/**
 * optional LayerType type = 5;
 * @return {!proto.caffe.V1LayerParameter.LayerType}
 */
proto.caffe.V1LayerParameter.prototype.getType = function() {
  return /** @type {!proto.caffe.V1LayerParameter.LayerType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.caffe.V1LayerParameter.LayerType} value */
proto.caffe.V1LayerParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.caffe.V1LayerParameter.prototype.clearType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated BlobProto blobs = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobProto>}
 */
proto.caffe.V1LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array.<!proto.caffe.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobProto, 6));
};


/** @param {!Array.<!proto.caffe.BlobProto>} value */
proto.caffe.V1LayerParameter.prototype.setBlobsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.caffe.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.V1LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.caffe.BlobProto, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearBlobsList = function() {
  this.setBlobsList([]);
};


/**
 * repeated string param = 1001;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.caffe.V1LayerParameter.prototype.getParamList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1001));
};


/** @param {!Array.<string>} value */
proto.caffe.V1LayerParameter.prototype.setParamList = function(value) {
  jspb.Message.setField(this, 1001, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addParam = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1001, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearParamList = function() {
  this.setParamList([]);
};


/**
 * repeated DimCheckMode blob_share_mode = 1002;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.V1LayerParameter.DimCheckMode>}
 */
proto.caffe.V1LayerParameter.prototype.getBlobShareModeList = function() {
  return /** @type {!Array.<!proto.caffe.V1LayerParameter.DimCheckMode>} */ (jspb.Message.getField(this, 1002));
};


/** @param {!Array.<!proto.caffe.V1LayerParameter.DimCheckMode>} value */
proto.caffe.V1LayerParameter.prototype.setBlobShareModeList = function(value) {
  jspb.Message.setField(this, 1002, value || []);
};


/**
 * @param {!proto.caffe.V1LayerParameter.DimCheckMode} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addBlobShareMode = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1002, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearBlobShareModeList = function() {
  this.setBlobShareModeList([]);
};


/**
 * repeated float blobs_lr = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.V1LayerParameter.prototype.getBlobsLrList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/** @param {!Array.<number>} value */
proto.caffe.V1LayerParameter.prototype.setBlobsLrList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addBlobsLr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearBlobsLrList = function() {
  this.setBlobsLrList([]);
};


/**
 * repeated float weight_decay = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.V1LayerParameter.prototype.getWeightDecayList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array.<number>} value */
proto.caffe.V1LayerParameter.prototype.setWeightDecayList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addWeightDecay = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearWeightDecayList = function() {
  this.setWeightDecayList([]);
};


/**
 * repeated float loss_weight = 35;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.V1LayerParameter.prototype.getLossWeightList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 35));
};


/** @param {!Array.<number>} value */
proto.caffe.V1LayerParameter.prototype.setLossWeightList = function(value) {
  jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.V1LayerParameter.prototype.addLossWeight = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


proto.caffe.V1LayerParameter.prototype.clearLossWeightList = function() {
  this.setLossWeightList([]);
};


/**
 * optional AccuracyParameter accuracy_param = 27;
 * @return {?proto.caffe.AccuracyParameter}
 */
proto.caffe.V1LayerParameter.prototype.getAccuracyParam = function() {
  return /** @type{?proto.caffe.AccuracyParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.AccuracyParameter, 27));
};


/** @param {?proto.caffe.AccuracyParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setAccuracyParam = function(value) {
  jspb.Message.setWrapperField(this, 27, value);
};


proto.caffe.V1LayerParameter.prototype.clearAccuracyParam = function() {
  this.setAccuracyParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasAccuracyParam = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional ArgMaxParameter argmax_param = 23;
 * @return {?proto.caffe.ArgMaxParameter}
 */
proto.caffe.V1LayerParameter.prototype.getArgmaxParam = function() {
  return /** @type{?proto.caffe.ArgMaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ArgMaxParameter, 23));
};


/** @param {?proto.caffe.ArgMaxParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setArgmaxParam = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.caffe.V1LayerParameter.prototype.clearArgmaxParam = function() {
  this.setArgmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasArgmaxParam = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional ConcatParameter concat_param = 9;
 * @return {?proto.caffe.ConcatParameter}
 */
proto.caffe.V1LayerParameter.prototype.getConcatParam = function() {
  return /** @type{?proto.caffe.ConcatParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ConcatParameter, 9));
};


/** @param {?proto.caffe.ConcatParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setConcatParam = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.caffe.V1LayerParameter.prototype.clearConcatParam = function() {
  this.setConcatParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasConcatParam = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ContrastiveLossParameter contrastive_loss_param = 40;
 * @return {?proto.caffe.ContrastiveLossParameter}
 */
proto.caffe.V1LayerParameter.prototype.getContrastiveLossParam = function() {
  return /** @type{?proto.caffe.ContrastiveLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ContrastiveLossParameter, 40));
};


/** @param {?proto.caffe.ContrastiveLossParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setContrastiveLossParam = function(value) {
  jspb.Message.setWrapperField(this, 40, value);
};


proto.caffe.V1LayerParameter.prototype.clearContrastiveLossParam = function() {
  this.setContrastiveLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasContrastiveLossParam = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional ConvolutionParameter convolution_param = 10;
 * @return {?proto.caffe.ConvolutionParameter}
 */
proto.caffe.V1LayerParameter.prototype.getConvolutionParam = function() {
  return /** @type{?proto.caffe.ConvolutionParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ConvolutionParameter, 10));
};


/** @param {?proto.caffe.ConvolutionParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setConvolutionParam = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.caffe.V1LayerParameter.prototype.clearConvolutionParam = function() {
  this.setConvolutionParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasConvolutionParam = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DataParameter data_param = 11;
 * @return {?proto.caffe.DataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getDataParam = function() {
  return /** @type{?proto.caffe.DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DataParameter, 11));
};


/** @param {?proto.caffe.DataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setDataParam = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.caffe.V1LayerParameter.prototype.clearDataParam = function() {
  this.setDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasDataParam = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DropoutParameter dropout_param = 12;
 * @return {?proto.caffe.DropoutParameter}
 */
proto.caffe.V1LayerParameter.prototype.getDropoutParam = function() {
  return /** @type{?proto.caffe.DropoutParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DropoutParameter, 12));
};


/** @param {?proto.caffe.DropoutParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setDropoutParam = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.caffe.V1LayerParameter.prototype.clearDropoutParam = function() {
  this.setDropoutParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasDropoutParam = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional DummyDataParameter dummy_data_param = 26;
 * @return {?proto.caffe.DummyDataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getDummyDataParam = function() {
  return /** @type{?proto.caffe.DummyDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.DummyDataParameter, 26));
};


/** @param {?proto.caffe.DummyDataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setDummyDataParam = function(value) {
  jspb.Message.setWrapperField(this, 26, value);
};


proto.caffe.V1LayerParameter.prototype.clearDummyDataParam = function() {
  this.setDummyDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasDummyDataParam = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional EltwiseParameter eltwise_param = 24;
 * @return {?proto.caffe.EltwiseParameter}
 */
proto.caffe.V1LayerParameter.prototype.getEltwiseParam = function() {
  return /** @type{?proto.caffe.EltwiseParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.EltwiseParameter, 24));
};


/** @param {?proto.caffe.EltwiseParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setEltwiseParam = function(value) {
  jspb.Message.setWrapperField(this, 24, value);
};


proto.caffe.V1LayerParameter.prototype.clearEltwiseParam = function() {
  this.setEltwiseParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasEltwiseParam = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional ExpParameter exp_param = 41;
 * @return {?proto.caffe.ExpParameter}
 */
proto.caffe.V1LayerParameter.prototype.getExpParam = function() {
  return /** @type{?proto.caffe.ExpParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ExpParameter, 41));
};


/** @param {?proto.caffe.ExpParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setExpParam = function(value) {
  jspb.Message.setWrapperField(this, 41, value);
};


proto.caffe.V1LayerParameter.prototype.clearExpParam = function() {
  this.setExpParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasExpParam = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional HDF5DataParameter hdf5_data_param = 13;
 * @return {?proto.caffe.HDF5DataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getHdf5DataParam = function() {
  return /** @type{?proto.caffe.HDF5DataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HDF5DataParameter, 13));
};


/** @param {?proto.caffe.HDF5DataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setHdf5DataParam = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.caffe.V1LayerParameter.prototype.clearHdf5DataParam = function() {
  this.setHdf5DataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasHdf5DataParam = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 14;
 * @return {?proto.caffe.HDF5OutputParameter}
 */
proto.caffe.V1LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.caffe.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HDF5OutputParameter, 14));
};


/** @param {?proto.caffe.HDF5OutputParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setHdf5OutputParam = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.caffe.V1LayerParameter.prototype.clearHdf5OutputParam = function() {
  this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional HingeLossParameter hinge_loss_param = 29;
 * @return {?proto.caffe.HingeLossParameter}
 */
proto.caffe.V1LayerParameter.prototype.getHingeLossParam = function() {
  return /** @type{?proto.caffe.HingeLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HingeLossParameter, 29));
};


/** @param {?proto.caffe.HingeLossParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setHingeLossParam = function(value) {
  jspb.Message.setWrapperField(this, 29, value);
};


proto.caffe.V1LayerParameter.prototype.clearHingeLossParam = function() {
  this.setHingeLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasHingeLossParam = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional ImageDataParameter image_data_param = 15;
 * @return {?proto.caffe.ImageDataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getImageDataParam = function() {
  return /** @type{?proto.caffe.ImageDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ImageDataParameter, 15));
};


/** @param {?proto.caffe.ImageDataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setImageDataParam = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.caffe.V1LayerParameter.prototype.clearImageDataParam = function() {
  this.setImageDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasImageDataParam = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional InfogainLossParameter infogain_loss_param = 16;
 * @return {?proto.caffe.InfogainLossParameter}
 */
proto.caffe.V1LayerParameter.prototype.getInfogainLossParam = function() {
  return /** @type{?proto.caffe.InfogainLossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.InfogainLossParameter, 16));
};


/** @param {?proto.caffe.InfogainLossParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setInfogainLossParam = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.caffe.V1LayerParameter.prototype.clearInfogainLossParam = function() {
  this.setInfogainLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasInfogainLossParam = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional InnerProductParameter inner_product_param = 17;
 * @return {?proto.caffe.InnerProductParameter}
 */
proto.caffe.V1LayerParameter.prototype.getInnerProductParam = function() {
  return /** @type{?proto.caffe.InnerProductParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.InnerProductParameter, 17));
};


/** @param {?proto.caffe.InnerProductParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setInnerProductParam = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.caffe.V1LayerParameter.prototype.clearInnerProductParam = function() {
  this.setInnerProductParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasInnerProductParam = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional LRNParameter lrn_param = 18;
 * @return {?proto.caffe.LRNParameter}
 */
proto.caffe.V1LayerParameter.prototype.getLrnParam = function() {
  return /** @type{?proto.caffe.LRNParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.LRNParameter, 18));
};


/** @param {?proto.caffe.LRNParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setLrnParam = function(value) {
  jspb.Message.setWrapperField(this, 18, value);
};


proto.caffe.V1LayerParameter.prototype.clearLrnParam = function() {
  this.setLrnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasLrnParam = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional MemoryDataParameter memory_data_param = 22;
 * @return {?proto.caffe.MemoryDataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getMemoryDataParam = function() {
  return /** @type{?proto.caffe.MemoryDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.MemoryDataParameter, 22));
};


/** @param {?proto.caffe.MemoryDataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setMemoryDataParam = function(value) {
  jspb.Message.setWrapperField(this, 22, value);
};


proto.caffe.V1LayerParameter.prototype.clearMemoryDataParam = function() {
  this.setMemoryDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasMemoryDataParam = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional MVNParameter mvn_param = 34;
 * @return {?proto.caffe.MVNParameter}
 */
proto.caffe.V1LayerParameter.prototype.getMvnParam = function() {
  return /** @type{?proto.caffe.MVNParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.MVNParameter, 34));
};


/** @param {?proto.caffe.MVNParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setMvnParam = function(value) {
  jspb.Message.setWrapperField(this, 34, value);
};


proto.caffe.V1LayerParameter.prototype.clearMvnParam = function() {
  this.setMvnParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasMvnParam = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional PoolingParameter pooling_param = 19;
 * @return {?proto.caffe.PoolingParameter}
 */
proto.caffe.V1LayerParameter.prototype.getPoolingParam = function() {
  return /** @type{?proto.caffe.PoolingParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PoolingParameter, 19));
};


/** @param {?proto.caffe.PoolingParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setPoolingParam = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.caffe.V1LayerParameter.prototype.clearPoolingParam = function() {
  this.setPoolingParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasPoolingParam = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PowerParameter power_param = 21;
 * @return {?proto.caffe.PowerParameter}
 */
proto.caffe.V1LayerParameter.prototype.getPowerParam = function() {
  return /** @type{?proto.caffe.PowerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.PowerParameter, 21));
};


/** @param {?proto.caffe.PowerParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setPowerParam = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.caffe.V1LayerParameter.prototype.clearPowerParam = function() {
  this.setPowerParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasPowerParam = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ReLUParameter relu_param = 30;
 * @return {?proto.caffe.ReLUParameter}
 */
proto.caffe.V1LayerParameter.prototype.getReluParam = function() {
  return /** @type{?proto.caffe.ReLUParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ReLUParameter, 30));
};


/** @param {?proto.caffe.ReLUParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setReluParam = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.caffe.V1LayerParameter.prototype.clearReluParam = function() {
  this.setReluParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasReluParam = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional SigmoidParameter sigmoid_param = 38;
 * @return {?proto.caffe.SigmoidParameter}
 */
proto.caffe.V1LayerParameter.prototype.getSigmoidParam = function() {
  return /** @type{?proto.caffe.SigmoidParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SigmoidParameter, 38));
};


/** @param {?proto.caffe.SigmoidParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setSigmoidParam = function(value) {
  jspb.Message.setWrapperField(this, 38, value);
};


proto.caffe.V1LayerParameter.prototype.clearSigmoidParam = function() {
  this.setSigmoidParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasSigmoidParam = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional SoftmaxParameter softmax_param = 39;
 * @return {?proto.caffe.SoftmaxParameter}
 */
proto.caffe.V1LayerParameter.prototype.getSoftmaxParam = function() {
  return /** @type{?proto.caffe.SoftmaxParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SoftmaxParameter, 39));
};


/** @param {?proto.caffe.SoftmaxParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setSoftmaxParam = function(value) {
  jspb.Message.setWrapperField(this, 39, value);
};


proto.caffe.V1LayerParameter.prototype.clearSoftmaxParam = function() {
  this.setSoftmaxParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasSoftmaxParam = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional SliceParameter slice_param = 31;
 * @return {?proto.caffe.SliceParameter}
 */
proto.caffe.V1LayerParameter.prototype.getSliceParam = function() {
  return /** @type{?proto.caffe.SliceParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.SliceParameter, 31));
};


/** @param {?proto.caffe.SliceParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setSliceParam = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.caffe.V1LayerParameter.prototype.clearSliceParam = function() {
  this.setSliceParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasSliceParam = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional TanHParameter tanh_param = 37;
 * @return {?proto.caffe.TanHParameter}
 */
proto.caffe.V1LayerParameter.prototype.getTanhParam = function() {
  return /** @type{?proto.caffe.TanHParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.TanHParameter, 37));
};


/** @param {?proto.caffe.TanHParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setTanhParam = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.caffe.V1LayerParameter.prototype.clearTanhParam = function() {
  this.setTanhParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasTanhParam = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional ThresholdParameter threshold_param = 25;
 * @return {?proto.caffe.ThresholdParameter}
 */
proto.caffe.V1LayerParameter.prototype.getThresholdParam = function() {
  return /** @type{?proto.caffe.ThresholdParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.ThresholdParameter, 25));
};


/** @param {?proto.caffe.ThresholdParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setThresholdParam = function(value) {
  jspb.Message.setWrapperField(this, 25, value);
};


proto.caffe.V1LayerParameter.prototype.clearThresholdParam = function() {
  this.setThresholdParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasThresholdParam = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional WindowDataParameter window_data_param = 20;
 * @return {?proto.caffe.WindowDataParameter}
 */
proto.caffe.V1LayerParameter.prototype.getWindowDataParam = function() {
  return /** @type{?proto.caffe.WindowDataParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.WindowDataParameter, 20));
};


/** @param {?proto.caffe.WindowDataParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setWindowDataParam = function(value) {
  jspb.Message.setWrapperField(this, 20, value);
};


proto.caffe.V1LayerParameter.prototype.clearWindowDataParam = function() {
  this.setWindowDataParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasWindowDataParam = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional TransformationParameter transform_param = 36;
 * @return {?proto.caffe.TransformationParameter}
 */
proto.caffe.V1LayerParameter.prototype.getTransformParam = function() {
  return /** @type{?proto.caffe.TransformationParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.TransformationParameter, 36));
};


/** @param {?proto.caffe.TransformationParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setTransformParam = function(value) {
  jspb.Message.setWrapperField(this, 36, value);
};


proto.caffe.V1LayerParameter.prototype.clearTransformParam = function() {
  this.setTransformParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasTransformParam = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional LossParameter loss_param = 42;
 * @return {?proto.caffe.LossParameter}
 */
proto.caffe.V1LayerParameter.prototype.getLossParam = function() {
  return /** @type{?proto.caffe.LossParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.LossParameter, 42));
};


/** @param {?proto.caffe.LossParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setLossParam = function(value) {
  jspb.Message.setWrapperField(this, 42, value);
};


proto.caffe.V1LayerParameter.prototype.clearLossParam = function() {
  this.setLossParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasLossParam = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional V0LayerParameter layer = 1;
 * @return {?proto.caffe.V0LayerParameter}
 */
proto.caffe.V1LayerParameter.prototype.getLayer = function() {
  return /** @type{?proto.caffe.V0LayerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.V0LayerParameter, 1));
};


/** @param {?proto.caffe.V0LayerParameter|undefined} value */
proto.caffe.V1LayerParameter.prototype.setLayer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.caffe.V1LayerParameter.prototype.clearLayer = function() {
  this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V1LayerParameter.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.V0LayerParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.caffe.V0LayerParameter.repeatedFields_, null);
};
goog.inherits(proto.caffe.V0LayerParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.V0LayerParameter.displayName = 'proto.caffe.V0LayerParameter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.caffe.V0LayerParameter.repeatedFields_ = [50,51,52];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.V0LayerParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.V0LayerParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.V0LayerParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.V0LayerParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    numOutput: jspb.Message.getField(msg, 3),
    biasterm: jspb.Message.getFieldWithDefault(msg, 4, true),
    weightFiller: (f = msg.getWeightFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    biasFiller: (f = msg.getBiasFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    pad: jspb.Message.getFieldWithDefault(msg, 7, 0),
    kernelsize: jspb.Message.getField(msg, 8),
    group: jspb.Message.getFieldWithDefault(msg, 9, 1),
    stride: jspb.Message.getFieldWithDefault(msg, 10, 1),
    pool: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dropoutRatio: +jspb.Message.getFieldWithDefault(msg, 12, 0.5),
    localSize: jspb.Message.getFieldWithDefault(msg, 13, 5),
    alpha: +jspb.Message.getFieldWithDefault(msg, 14, 1.0),
    beta: +jspb.Message.getFieldWithDefault(msg, 15, 0.75),
    k: +jspb.Message.getFieldWithDefault(msg, 22, 1.0),
    source: jspb.Message.getField(msg, 16),
    scale: +jspb.Message.getFieldWithDefault(msg, 17, 1.0),
    meanfile: jspb.Message.getField(msg, 18),
    batchsize: jspb.Message.getField(msg, 19),
    cropsize: jspb.Message.getFieldWithDefault(msg, 20, 0),
    mirror: jspb.Message.getFieldWithDefault(msg, 21, false),
    blobsList: jspb.Message.toObjectList(msg.getBlobsList(),
    proto.caffe.BlobProto.toObject, includeInstance),
    blobsLrList: jspb.Message.getRepeatedFloatingPointField(msg, 51),
    weightDecayList: jspb.Message.getRepeatedFloatingPointField(msg, 52),
    randSkip: jspb.Message.getFieldWithDefault(msg, 53, 0),
    detFgThreshold: +jspb.Message.getFieldWithDefault(msg, 54, 0.5),
    detBgThreshold: +jspb.Message.getFieldWithDefault(msg, 55, 0.5),
    detFgFraction: +jspb.Message.getFieldWithDefault(msg, 56, 0.25),
    detContextPad: jspb.Message.getFieldWithDefault(msg, 58, 0),
    detCropMode: jspb.Message.getFieldWithDefault(msg, 59, "warp"),
    newNum: jspb.Message.getFieldWithDefault(msg, 60, 0),
    newChannels: jspb.Message.getFieldWithDefault(msg, 61, 0),
    newHeight: jspb.Message.getFieldWithDefault(msg, 62, 0),
    newWidth: jspb.Message.getFieldWithDefault(msg, 63, 0),
    shuffleImages: jspb.Message.getFieldWithDefault(msg, 64, false),
    concatDim: jspb.Message.getFieldWithDefault(msg, 65, 1),
    hdf5OutputParam: (f = msg.getHdf5OutputParam()) && proto.caffe.HDF5OutputParameter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.V0LayerParameter}
 */
proto.caffe.V0LayerParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.V0LayerParameter;
  return proto.caffe.V0LayerParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.V0LayerParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.V0LayerParameter}
 */
proto.caffe.V0LayerParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumOutput(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBiasterm(value);
      break;
    case 5:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setWeightFiller(value);
      break;
    case 6:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setBiasFiller(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPad(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKernelsize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStride(value);
      break;
    case 11:
      var value = /** @type {!proto.caffe.V0LayerParameter.PoolMethod} */ (reader.readEnum());
      msg.setPool(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDropoutRatio(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLocalSize(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAlpha(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBeta(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setK(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeanfile(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchsize(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCropsize(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMirror(value);
      break;
    case 50:
      var value = new proto.caffe.BlobProto;
      reader.readMessage(value,proto.caffe.BlobProto.deserializeBinaryFromReader);
      msg.addBlobs(value);
      break;
    case 51:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addBlobsLr(value);
      break;
    case 52:
      var value = /** @type {number} */ (reader.readFloat());
      msg.addWeightDecay(value);
      break;
    case 53:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandSkip(value);
      break;
    case 54:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetFgThreshold(value);
      break;
    case 55:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetBgThreshold(value);
      break;
    case 56:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDetFgFraction(value);
      break;
    case 58:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDetContextPad(value);
      break;
    case 59:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetCropMode(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewNum(value);
      break;
    case 61:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewChannels(value);
      break;
    case 62:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewHeight(value);
      break;
    case 63:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewWidth(value);
      break;
    case 64:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShuffleImages(value);
      break;
    case 65:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConcatDim(value);
      break;
    case 1001:
      var value = new proto.caffe.HDF5OutputParameter;
      reader.readMessage(value,proto.caffe.HDF5OutputParameter.deserializeBinaryFromReader);
      msg.setHdf5OutputParam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.V0LayerParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.V0LayerParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.V0LayerParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.V0LayerParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getWeightFiller();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = message.getBiasFiller();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {!proto.caffe.V0LayerParameter.PoolMethod} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getBlobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      50,
      f,
      proto.caffe.BlobProto.serializeBinaryToWriter
    );
  }
  f = message.getBlobsLrList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      51,
      f
    );
  }
  f = message.getWeightDecayList();
  if (f.length > 0) {
    writer.writeRepeatedFloat(
      52,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 53));
  if (f != null) {
    writer.writeUint32(
      53,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 54));
  if (f != null) {
    writer.writeFloat(
      54,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 55));
  if (f != null) {
    writer.writeFloat(
      55,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 56));
  if (f != null) {
    writer.writeFloat(
      56,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 58));
  if (f != null) {
    writer.writeUint32(
      58,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 59));
  if (f != null) {
    writer.writeString(
      59,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 60));
  if (f != null) {
    writer.writeInt32(
      60,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 61));
  if (f != null) {
    writer.writeInt32(
      61,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 62));
  if (f != null) {
    writer.writeInt32(
      62,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 63));
  if (f != null) {
    writer.writeInt32(
      63,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 64));
  if (f != null) {
    writer.writeBool(
      64,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 65));
  if (f != null) {
    writer.writeUint32(
      65,
      f
    );
  }
  f = message.getHdf5OutputParam();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.caffe.HDF5OutputParameter.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.caffe.V0LayerParameter.PoolMethod = {
  MAX: 0,
  AVE: 1,
  STOCHASTIC: 2
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.caffe.V0LayerParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.caffe.V0LayerParameter.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.caffe.V0LayerParameter.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.caffe.V0LayerParameter.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.caffe.V0LayerParameter.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.V0LayerParameter.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 num_output = 3;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getNumOutput = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setNumOutput = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.caffe.V0LayerParameter.prototype.clearNumOutput = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasNumOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool biasterm = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.V0LayerParameter.prototype.getBiasterm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, true));
};


/** @param {boolean} value */
proto.caffe.V0LayerParameter.prototype.setBiasterm = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.caffe.V0LayerParameter.prototype.clearBiasterm = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasBiasterm = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FillerParameter weight_filler = 5;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.V0LayerParameter.prototype.getWeightFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 5));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.V0LayerParameter.prototype.setWeightFiller = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.caffe.V0LayerParameter.prototype.clearWeightFiller = function() {
  this.setWeightFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasWeightFiller = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FillerParameter bias_filler = 6;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.V0LayerParameter.prototype.getBiasFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 6));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.V0LayerParameter.prototype.setBiasFiller = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.caffe.V0LayerParameter.prototype.clearBiasFiller = function() {
  this.setBiasFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasBiasFiller = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 pad = 7;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setPad = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.caffe.V0LayerParameter.prototype.clearPad = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasPad = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 kernelsize = 8;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getKernelsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setKernelsize = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.caffe.V0LayerParameter.prototype.clearKernelsize = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasKernelsize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 group = 9;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setGroup = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.caffe.V0LayerParameter.prototype.clearGroup = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 stride = 10;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getStride = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 1));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setStride = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.caffe.V0LayerParameter.prototype.clearStride = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasStride = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PoolMethod pool = 11;
 * @return {!proto.caffe.V0LayerParameter.PoolMethod}
 */
proto.caffe.V0LayerParameter.prototype.getPool = function() {
  return /** @type {!proto.caffe.V0LayerParameter.PoolMethod} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.caffe.V0LayerParameter.PoolMethod} value */
proto.caffe.V0LayerParameter.prototype.setPool = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.caffe.V0LayerParameter.prototype.clearPool = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasPool = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float dropout_ratio = 12;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getDropoutRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.5));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setDropoutRatio = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.caffe.V0LayerParameter.prototype.clearDropoutRatio = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDropoutRatio = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 local_size = 13;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getLocalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 5));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setLocalSize = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.caffe.V0LayerParameter.prototype.clearLocalSize = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasLocalSize = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float alpha = 14;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getAlpha = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 1.0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setAlpha = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.caffe.V0LayerParameter.prototype.clearAlpha = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float beta = 15;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getBeta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.75));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setBeta = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.caffe.V0LayerParameter.prototype.clearBeta = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasBeta = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float k = 22;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getK = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 1.0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setK = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.caffe.V0LayerParameter.prototype.clearK = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasK = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string source = 16;
 * @return {string}
 */
proto.caffe.V0LayerParameter.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.caffe.V0LayerParameter.prototype.setSource = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.caffe.V0LayerParameter.prototype.clearSource = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasSource = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional float scale = 17;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getScale = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 1.0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setScale = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.caffe.V0LayerParameter.prototype.clearScale = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasScale = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string meanfile = 18;
 * @return {string}
 */
proto.caffe.V0LayerParameter.prototype.getMeanfile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.caffe.V0LayerParameter.prototype.setMeanfile = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.caffe.V0LayerParameter.prototype.clearMeanfile = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasMeanfile = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 batchsize = 19;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getBatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setBatchsize = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.caffe.V0LayerParameter.prototype.clearBatchsize = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasBatchsize = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 cropsize = 20;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getCropsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setCropsize = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.caffe.V0LayerParameter.prototype.clearCropsize = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasCropsize = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bool mirror = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.V0LayerParameter.prototype.getMirror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 21, false));
};


/** @param {boolean} value */
proto.caffe.V0LayerParameter.prototype.setMirror = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.caffe.V0LayerParameter.prototype.clearMirror = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasMirror = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated BlobProto blobs = 50;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.caffe.BlobProto>}
 */
proto.caffe.V0LayerParameter.prototype.getBlobsList = function() {
  return /** @type{!Array.<!proto.caffe.BlobProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.caffe.BlobProto, 50));
};


/** @param {!Array.<!proto.caffe.BlobProto>} value */
proto.caffe.V0LayerParameter.prototype.setBlobsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 50, value);
};


/**
 * @param {!proto.caffe.BlobProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.caffe.BlobProto}
 */
proto.caffe.V0LayerParameter.prototype.addBlobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 50, opt_value, proto.caffe.BlobProto, opt_index);
};


proto.caffe.V0LayerParameter.prototype.clearBlobsList = function() {
  this.setBlobsList([]);
};


/**
 * repeated float blobs_lr = 51;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.V0LayerParameter.prototype.getBlobsLrList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 51));
};


/** @param {!Array.<number>} value */
proto.caffe.V0LayerParameter.prototype.setBlobsLrList = function(value) {
  jspb.Message.setField(this, 51, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.V0LayerParameter.prototype.addBlobsLr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 51, value, opt_index);
};


proto.caffe.V0LayerParameter.prototype.clearBlobsLrList = function() {
  this.setBlobsLrList([]);
};


/**
 * repeated float weight_decay = 52;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.caffe.V0LayerParameter.prototype.getWeightDecayList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 52));
};


/** @param {!Array.<number>} value */
proto.caffe.V0LayerParameter.prototype.setWeightDecayList = function(value) {
  jspb.Message.setField(this, 52, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.caffe.V0LayerParameter.prototype.addWeightDecay = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 52, value, opt_index);
};


proto.caffe.V0LayerParameter.prototype.clearWeightDecayList = function() {
  this.setWeightDecayList([]);
};


/**
 * optional uint32 rand_skip = 53;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getRandSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 53, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setRandSkip = function(value) {
  jspb.Message.setField(this, 53, value);
};


proto.caffe.V0LayerParameter.prototype.clearRandSkip = function() {
  jspb.Message.setField(this, 53, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasRandSkip = function() {
  return jspb.Message.getField(this, 53) != null;
};


/**
 * optional float det_fg_threshold = 54;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getDetFgThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 54, 0.5));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setDetFgThreshold = function(value) {
  jspb.Message.setField(this, 54, value);
};


proto.caffe.V0LayerParameter.prototype.clearDetFgThreshold = function() {
  jspb.Message.setField(this, 54, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDetFgThreshold = function() {
  return jspb.Message.getField(this, 54) != null;
};


/**
 * optional float det_bg_threshold = 55;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getDetBgThreshold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 55, 0.5));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setDetBgThreshold = function(value) {
  jspb.Message.setField(this, 55, value);
};


proto.caffe.V0LayerParameter.prototype.clearDetBgThreshold = function() {
  jspb.Message.setField(this, 55, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDetBgThreshold = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional float det_fg_fraction = 56;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getDetFgFraction = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 56, 0.25));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setDetFgFraction = function(value) {
  jspb.Message.setField(this, 56, value);
};


proto.caffe.V0LayerParameter.prototype.clearDetFgFraction = function() {
  jspb.Message.setField(this, 56, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDetFgFraction = function() {
  return jspb.Message.getField(this, 56) != null;
};


/**
 * optional uint32 det_context_pad = 58;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getDetContextPad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 58, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setDetContextPad = function(value) {
  jspb.Message.setField(this, 58, value);
};


proto.caffe.V0LayerParameter.prototype.clearDetContextPad = function() {
  jspb.Message.setField(this, 58, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDetContextPad = function() {
  return jspb.Message.getField(this, 58) != null;
};


/**
 * optional string det_crop_mode = 59;
 * @return {string}
 */
proto.caffe.V0LayerParameter.prototype.getDetCropMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 59, "warp"));
};


/** @param {string} value */
proto.caffe.V0LayerParameter.prototype.setDetCropMode = function(value) {
  jspb.Message.setField(this, 59, value);
};


proto.caffe.V0LayerParameter.prototype.clearDetCropMode = function() {
  jspb.Message.setField(this, 59, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasDetCropMode = function() {
  return jspb.Message.getField(this, 59) != null;
};


/**
 * optional int32 new_num = 60;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getNewNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setNewNum = function(value) {
  jspb.Message.setField(this, 60, value);
};


proto.caffe.V0LayerParameter.prototype.clearNewNum = function() {
  jspb.Message.setField(this, 60, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasNewNum = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional int32 new_channels = 61;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getNewChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 61, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setNewChannels = function(value) {
  jspb.Message.setField(this, 61, value);
};


proto.caffe.V0LayerParameter.prototype.clearNewChannels = function() {
  jspb.Message.setField(this, 61, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasNewChannels = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional int32 new_height = 62;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getNewHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 62, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setNewHeight = function(value) {
  jspb.Message.setField(this, 62, value);
};


proto.caffe.V0LayerParameter.prototype.clearNewHeight = function() {
  jspb.Message.setField(this, 62, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasNewHeight = function() {
  return jspb.Message.getField(this, 62) != null;
};


/**
 * optional int32 new_width = 63;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getNewWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 63, 0));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setNewWidth = function(value) {
  jspb.Message.setField(this, 63, value);
};


proto.caffe.V0LayerParameter.prototype.clearNewWidth = function() {
  jspb.Message.setField(this, 63, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasNewWidth = function() {
  return jspb.Message.getField(this, 63) != null;
};


/**
 * optional bool shuffle_images = 64;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.V0LayerParameter.prototype.getShuffleImages = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 64, false));
};


/** @param {boolean} value */
proto.caffe.V0LayerParameter.prototype.setShuffleImages = function(value) {
  jspb.Message.setField(this, 64, value);
};


proto.caffe.V0LayerParameter.prototype.clearShuffleImages = function() {
  jspb.Message.setField(this, 64, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasShuffleImages = function() {
  return jspb.Message.getField(this, 64) != null;
};


/**
 * optional uint32 concat_dim = 65;
 * @return {number}
 */
proto.caffe.V0LayerParameter.prototype.getConcatDim = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 65, 1));
};


/** @param {number} value */
proto.caffe.V0LayerParameter.prototype.setConcatDim = function(value) {
  jspb.Message.setField(this, 65, value);
};


proto.caffe.V0LayerParameter.prototype.clearConcatDim = function() {
  jspb.Message.setField(this, 65, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasConcatDim = function() {
  return jspb.Message.getField(this, 65) != null;
};


/**
 * optional HDF5OutputParameter hdf5_output_param = 1001;
 * @return {?proto.caffe.HDF5OutputParameter}
 */
proto.caffe.V0LayerParameter.prototype.getHdf5OutputParam = function() {
  return /** @type{?proto.caffe.HDF5OutputParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.HDF5OutputParameter, 1001));
};


/** @param {?proto.caffe.HDF5OutputParameter|undefined} value */
proto.caffe.V0LayerParameter.prototype.setHdf5OutputParam = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.caffe.V0LayerParameter.prototype.clearHdf5OutputParam = function() {
  this.setHdf5OutputParam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.V0LayerParameter.prototype.hasHdf5OutputParam = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.caffe.PReLUParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.caffe.PReLUParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.caffe.PReLUParameter.displayName = 'proto.caffe.PReLUParameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.caffe.PReLUParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.caffe.PReLUParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.caffe.PReLUParameter} msg The msg instance to transform.
 * @return {!Object}
 */
proto.caffe.PReLUParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filler: (f = msg.getFiller()) && proto.caffe.FillerParameter.toObject(includeInstance, f),
    channelShared: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.caffe.PReLUParameter}
 */
proto.caffe.PReLUParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.caffe.PReLUParameter;
  return proto.caffe.PReLUParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.caffe.PReLUParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.caffe.PReLUParameter}
 */
proto.caffe.PReLUParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.caffe.FillerParameter;
      reader.readMessage(value,proto.caffe.FillerParameter.deserializeBinaryFromReader);
      msg.setFiller(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChannelShared(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.caffe.PReLUParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.caffe.PReLUParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.caffe.PReLUParameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.caffe.PReLUParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiller();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.caffe.FillerParameter.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional FillerParameter filler = 1;
 * @return {?proto.caffe.FillerParameter}
 */
proto.caffe.PReLUParameter.prototype.getFiller = function() {
  return /** @type{?proto.caffe.FillerParameter} */ (
    jspb.Message.getWrapperField(this, proto.caffe.FillerParameter, 1));
};


/** @param {?proto.caffe.FillerParameter|undefined} value */
proto.caffe.PReLUParameter.prototype.setFiller = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.caffe.PReLUParameter.prototype.clearFiller = function() {
  this.setFiller(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PReLUParameter.prototype.hasFiller = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool channel_shared = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.caffe.PReLUParameter.prototype.getChannelShared = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.caffe.PReLUParameter.prototype.setChannelShared = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.caffe.PReLUParameter.prototype.clearChannelShared = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.caffe.PReLUParameter.prototype.hasChannelShared = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.caffe.Phase = {
  TRAIN: 0,
  TEST: 1
};

